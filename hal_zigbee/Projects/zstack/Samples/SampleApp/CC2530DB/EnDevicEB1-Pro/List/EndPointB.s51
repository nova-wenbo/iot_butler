///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        27/Mar/2017  15:11:05 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\Source\E /
//                          ndPointB.c                                        /
//    Command line       =  -f C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2. /
//                          3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg          /
//                          (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS) -f   /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\Tools\CC2530DB\f8wConfig.cfg            /
//                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR     /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\lucifer\Desktop\– /
//                          ≠“È\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sam /
//                          ples\SampleApp\Source\EndPointB.c -D ZIGBEEPRO    /
//                          -D NWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D       /
//                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                   /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \EnDevicEB1-Pro\List\ -lA                         /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \EnDevicEB1-Pro\List\ --diag_suppress             /
//                          Pe001,Pa010 -o C:\Users\lucifer\Desktop\–≠“È\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\EnDevicEB1-Pro\Obj\ -e --debug    /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \ -I C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530- /
//                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2 /
//                          530DB\..\SOURCE\ -I C:\Users\lucifer\Desktop\–≠“È /
//                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I  /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\MT\ -I                 /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I        /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\   /
//                          -I C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2. /
//                          3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I  /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I       /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\STACK\AF\ -I           /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\STACK\NWK\ -I          /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\STACK\SEC\ -I          /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I         /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\STACK\SYS\ -I          /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I          /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I           /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\ZMAC\ -I               /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I     /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I     /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I        /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I     /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\   /
//                          -I C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2. /
//                          3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04 /
//                          \SINGLE_CHIP\ -Ohz --require_prototypes           /
//    List file          =  C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \EnDevicEB1-Pro\List\EndPointB.s51                /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME EndPointB

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??SampleApp_HandleKeys?relay
        FUNCTION ??SampleApp_HandleKeys?relay,0203H
        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_MessageMSGCB?relay
        FUNCTION ??SampleApp_MessageMSGCB?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        PUBLIC ??callback?relay
        FUNCTION ??callback?relay,0203H
        PUBLIC B_CMD1
        PUBLIC B_CMD2
        PUBLIC B_CMD3
        PUBLIC B_CMD4
        PUBLIC B_CMD5
        PUBLIC B_CMD6
        PUBLIC SampleAppFlashCounter
        PUBLIC SampleAppPeriodicCounter
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Group
        PUBLIC SampleApp_HandleKeys
        FUNCTION SampleApp_HandleKeys,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_P2P_DstAddr
        PUBLIC SampleApp_Periodic_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        PUBLIC callback
        FUNCTION callback,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC cmd
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
MT_UartInit         SYMBOL "MT_UartInit"
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
memcpy              SYMBOL "memcpy"
HalUARTWrite        SYMBOL "HalUARTWrite"
strcmp              SYMBOL "strcmp"
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??afRegister?relay  SYMBOL "?relay", afRegister
??memcpy?relay      SYMBOL "?relay", memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??strcmp?relay      SYMBOL "?relay", strcmp
SampleApp_HandleKeys SYMBOL "SampleApp_HandleKeys"
??SampleApp_HandleKeys?relay SYMBOL "?relay", SampleApp_HandleKeys
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
??SampleApp_MessageMSGCB?relay SYMBOL "?relay", SampleApp_MessageMSGCB
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent
callback            SYMBOL "callback"
??callback?relay    SYMBOL "?relay", callback

        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memcpy
        FUNCTION memcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strcmp
        FUNCTION strcmp,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??memcpy?relay
        FUNCTION ??memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??strcmp?relay
        FUNCTION ??strcmp?relay,00H

// C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\EndPointB.c
//    1 
//    2 
//    3 /*********************************************************************
//    4  * INCLUDES
//    5  */
//    6 #include "OSAL.h"
//    7 #include "ZGlobals.h"
//    8 #include "AF.h"
//    9 #include "aps_groups.h"
//   10 #include "ZDApp.h"
//   11 
//   12 #include "SampleApp.h"
//   13 #include "SampleAppHw.h"
//   14 
//   15 #include "OnBoard.h"
//   16 
//   17 /* HAL */
//   18 #include "hal_lcd.h"
//   19 #include "hal_led.h"
//   20 #include "hal_key.h"
//   21 #include "MT_UART.h"
//   22 #include "MT_APP.h"
//   23 #include "MT.h"
//   24 #include "DHT11.h"
//   25 #include <math.h>
//   26 #include<string.h>
//   27 /*********************************************************************
//   28  * GLOBAL VARIABLES
//   29  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   30 uint8 cmd[9];
cmd:
        DS 9
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//   31 uint8 B_CMD1[]="EBE40000";
B_CMD1:
        DATA8
        DS 9
        REQUIRE `?<Initializer for B_CMD1>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   32 uint8 B_CMD2[]="EBE50000";
B_CMD2:
        DATA8
        DS 9
        REQUIRE `?<Initializer for B_CMD2>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   33 uint8 B_CMD3[]="EBE60000";
B_CMD3:
        DATA8
        DS 9
        REQUIRE `?<Initializer for B_CMD3>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   34 uint8 B_CMD4[]="EBE40001";
B_CMD4:
        DATA8
        DS 9
        REQUIRE `?<Initializer for B_CMD4>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   35 uint8 B_CMD5[]="EBE50001";
B_CMD5:
        DATA8
        DS 9
        REQUIRE `?<Initializer for B_CMD5>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   36 uint8 B_CMD6[]="EBE60001";
B_CMD6:
        DATA8
        DS 9
        REQUIRE `?<Initializer for B_CMD6>`
        REQUIRE __INIT_XDATA_I
//   37 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//   38 const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 2
//   39 {
//   40  SAMPLEAPP_PERIODIC_CLUSTERID1,
//   41  SAMPLEAPP_PERIODIC_CLUSTERID2,
//   42  
//   43 };
//   44 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   45 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 2
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 2
        DATA16
        DW SampleApp_ClusterList
//   46 {
//   47   SAMPLEAPP_ENDPOINT,              //  int Endpoint;
//   48   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//   49   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//   50   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//   51   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//   52   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//   53   (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
//   54   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//   55   (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
//   56 };
//   57 
//   58 // This is the Endpoint/Interface description.  It is defined here, but
//   59 // filled-in in SampleApp_Init().  Another way to go would be to fill
//   60 // in the structure here and make it a "const" (in code space).  The
//   61 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   62 endPointDesc_t SampleApp_epDesc;
SampleApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//   63 
//   64 /*********************************************************************
//   65  * EXTERNAL VARIABLES
//   66  */
//   67 
//   68 /*********************************************************************
//   69  * EXTERNAL FUNCTIONS
//   70  */
//   71 
//   72 /*********************************************************************
//   73  * LOCAL VARIABLES
//   74  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   75 uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   76                           // This variable will be received when
//   77                           // SampleApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   78 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   79 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   80 uint8 SampleApp_TransID;  // This is the unique message ID (counter)
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   81 
//   82 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   83 afAddrType_t SampleApp_P2P_DstAddr;      //µ„≤•
SampleApp_P2P_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   84 afAddrType_t SampleApp_Periodic_DstAddr;      //π„≤•
SampleApp_Periodic_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   85 aps_Group_t SampleApp_Group;
SampleApp_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//   86 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   87 uint8 SampleAppPeriodicCounter = 0;
SampleAppPeriodicCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   88 uint8 SampleAppFlashCounter = 0;
SampleAppFlashCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   89 
//   90 /*********************************************************************
//   91  * LOCAL FUNCTIONS
//   92  */
//   93 void SampleApp_HandleKeys( uint8 shift, uint8 keys );
//   94 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//   95 void callback(uint8 port, uint8 event);
//   96 /*********************************************************************
//   97  * NETWORK LAYER CALLBACKS
//   98  */
//   99 
//  100 /*********************************************************************
//  101  * PUBLIC FUNCTIONS
//  102  */
//  103 
//  104 /*********************************************************************
//  105  * @fn      SampleApp_Init
//  106  *
//  107  * @brief   Initialization function for the Generic App Task.
//  108  *          This is called during initialization and should contain
//  109  *          any application specific initialization (ie. hardware
//  110  *          initialization/setup, table initialization, power up
//  111  *          notificaiton ... ).
//  112  *
//  113  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  114  *                    used to send messages and set timers.
//  115  *
//  116  * @return  none
//  117  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  118 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SampleApp_Init
        CODE
//  119 { 
        FUNCALL SampleApp_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  120   SampleApp_TaskID = task_id;
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//  121   SampleApp_NwkState = DEV_INIT;
        MOV     DPTR,#SampleApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  122   SampleApp_TransID = 0;  
        MOV     DPTR,#SampleApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  123   MT_UartInit();                  //¥Æø⁄≥ı ºªØ
        ; Setup parameters for call to function MT_UartInit
        LCALL   ??MT_UartInit?relay
//  124   MT_UartRegisterTaskID(task_id); //◊¢≤·¥Æø⁄»ŒŒÒ
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     A,R6
        MOV     R1,A
        LCALL   ??MT_UartRegisterTaskID?relay
//  125  
//  126   
//  127  #if defined ( BUILD_ALL_DEVICES )
//  128   // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//  129   // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//  130   // together - if they are - we will start up a coordinator. Otherwise,
//  131   // the device will start as a router.
//  132   if ( readCoordinatorJumper() )
//  133     zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
//  134   else
//  135     zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  136 #endif // BUILD_ALL_DEVICES
//  137 
//  138 #if defined ( HOLD_AUTO_START )
//  139   // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  140   //  from starting the device and wait for the application to
//  141   //  start the device.
//  142   ZDOInitDevice(0);
//  143 #endif
//  144   
//  145   SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µ„≤• 
        MOV     DPTR,#SampleApp_P2P_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  146   SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  147   SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //¡Ω÷’∂À“‘¥Àµÿ÷∑Ω´≤‚¡ø÷µ∑¢ÀÕµΩ–≠µ˜∆˜
        MOV     DPTR,#SampleApp_P2P_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  148   
//  149 
//  150   //◊∞‘ÿ√Ë ˆ∑˚–≈œ¢£¨ƒ¨»œ°£
//  151   SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
        MOV     DPTR,#SampleApp_epDesc
        MOV     A,#0x14
        MOVX    @DPTR,A
//  152   SampleApp_epDesc.task_id = &SampleApp_TaskID;
        INC     DPTR
        MOV     A,#SampleApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  153   SampleApp_epDesc.simpleDesc
//  154             = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        INC     DPTR
        MOV     A,#SampleApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  155   SampleApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  156 
//  157   // ◊¢≤·∂Àµ„√Ë ˆ∑˚
//  158   afRegister( &SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SampleApp_epDesc & 0xff
        MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  159 
//  160   // Register for all key events - This app will handle all key events
//  161   RegisterForKeys( SampleApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  162  
//  163 #if defined ( LCD_SUPPORTED )
//  164   HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "SampleApp">` & 0xff
        MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  165 #endif
//  166 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  167 
//  168 /*********************************************************************
//  169  * @fn      ”¶”√≤„»ŒŒÒ¬÷—Ø∫Ø ˝£¨À˘”–»ŒŒÒ∂º‘⁄’‚¿ÔÀ≥–Ú÷¥––
//  170  *
//  171  * @brief   Generic Application Task event processor.  This function
//  172  *          is called to process all events for the task.  Events
//  173  *          include timers, messages and any other user defined events.
//  174  *
//  175  * @param   task_id  - The OSAL assigned task ID.
//  176  * @param   events - events to process.  This is a bit map and can
//  177  *                   contain more than one event.
//  178  *
//  179  * @return  none
//  180  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  181 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
        CODE
//  182 {
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  183   afIncomingMSGPacket_t *MSGpkt;
//  184   (void)task_id;  // Intentionally unreferenced parameter
//  185 
//  186   if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JZ      ??SampleApp_ProcessEvent_0
//  187   {
//  188     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??SampleApp_ProcessEvent_1
//  189     while ( MSGpkt )
//  190     {
//  191       switch ( MSGpkt->hdr.event )
//  192       {
//  193         // ∞¥º¸»ŒŒÒ£¨Œ¥ π”√
//  194         case KEY_CHANGE:
//  195           SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  196           break;
//  197 
//  198         //Ω” ’µΩŒﬁœﬂœ˚œ¢£¨µ˜”√œ˚œ¢Ω‚Œˆ∫Ø ˝
//  199         case AF_INCOMING_MSG_CMD: 
//  200           SampleApp_MessageMSGCB( MSGpkt );
//  201           break;
//  202 
//  203         // ”≤º˛≥ı ºªØ
//  204         case ZDO_STATE_CHANGE:
//  205           SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??SampleApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SampleApp_NwkState
        MOVX    @DPTR,A
//  206           if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
//  207               
//  208                //÷ª”–Œ¬∂»÷’∂À∆Ù∂Ø1.1s∂® ±—≠ª∑∑¢ÀÕŒ¬ ™∂»
//  209                (SampleApp_NwkState == DEV_END_DEVICE) )
//  210           {
//  211    
//  212           }
//  213           else
//  214           {
//  215             // Device is no longer in the network
//  216           }
//  217           break;
//  218 
//  219         default:
//  220           break;
//  221       }
//  222 
//  223       // Release the memory
//  224       osal_msg_deallocate( (uint8 *)MSGpkt );
??SampleApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  225 
//  226       // Next - if one is available
//  227       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??SampleApp_ProcessEvent_1:
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        MOV     A,R6
        ORL     A,R7
        JZ      ??SampleApp_ProcessEvent_4
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??SampleApp_ProcessEvent_5
        ADD     A,#0x49
        JZ      ??SampleApp_ProcessEvent_2
        SJMP    ??SampleApp_ProcessEvent_3
??SampleApp_ProcessEvent_5:
        ; Setup parameters for call to function SampleApp_MessageMSGCB
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??SampleApp_MessageMSGCB?relay
        SJMP    ??SampleApp_ProcessEvent_3
//  228     }
//  229 
//  230     // return unprocessed events
//  231     return (events ^ SYS_EVENT_MSG);
??SampleApp_ProcessEvent_4:
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??SampleApp_ProcessEvent_6
//  232   }
//  233 
//  234   // Send a message out - This event is generated by a timer
//  235   //  (setup in SampleApp_Init()).
//  236   if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
??SampleApp_ProcessEvent_0:
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_7
//  237   {
//  238    
//  239     // return unprocessed events
//  240     return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
        XRL     A,#0x1
        MOV     R2,A
        SJMP    ??SampleApp_ProcessEvent_6
//  241   }
//  242 
//  243   // Discard unknown events
//  244   return 0;
??SampleApp_ProcessEvent_7:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SampleApp_ProcessEvent_6:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  245 }
//  246 
//  247 /*********************************************************************
//  248  * Event Generation Functions
//  249  */
//  250 /*********************************************************************
//  251  * @fn      SampleApp_HandleKeys
//  252  *
//  253  * @brief   Handles all key events for this device.
//  254  *
//  255  * @param   shift - true if in shift/alt.
//  256  * @param   keys - bit field for key events. Valid entries:
//  257  *                 HAL_KEY_SW_2
//  258  *                 HAL_KEY_SW_1
//  259  *
//  260  * @return  none
//  261  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  262 void SampleApp_HandleKeys( uint8 shift, uint8 keys )
SampleApp_HandleKeys:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function SampleApp_HandleKeys
        CODE
//  263 {
        ; Saved register size: 0
        ; Auto size: 0
//  264  //Œ¥ π”√£¨≤ªµ√…æ≥˝ 
//  265 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock2
//  266 
//  267 /*********************************************************************
//  268  * LOCAL FUNCTIONS
//  269  */
//  270 
//  271 /*********************************************************************
//  272  * @fn      SampleApp_MessageMSGCB
//  273  *
//  274  * @brief   Data message processor callback.  This function processes
//  275  *          any incoming data - probably from other devices.  So, based
//  276  *          on cluster ID, perform the intended action.
//  277  *
//  278  * @param   none
//  279  *
//  280  * @return  none
//  281  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  282 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
SampleApp_MessageMSGCB:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function SampleApp_MessageMSGCB
        CODE
//  283 { 
        FUNCALL SampleApp_MessageMSGCB, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  284    memcpy(cmd, pkt->cmd.Data,8);
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R2
        ADD     A,#0x21
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#cmd & 0xff
        MOV     R3,#(cmd >> 8) & 0xff
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  285    HalUARTWrite(0, cmd, 8); // ‰≥ˆΩ” ’µΩµƒ ˝æ›µΩµ•∆¨ª˙
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R2,#cmd & 0xff
        MOV     R3,#(cmd >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  286    //“‘œ¬¥˙¬Î∑÷÷ß£¨∂‘”¶¡Ù∏ˆ÷∏∂®¡Ù◊˜¿©’π π”√°£
//  287    if (strcmp(cmd, B_CMD1) == 0)//≈–∂œ÷∏¡Ó «∑ÒŒ™EBE40000
        ; Setup parameters for call to function strcmp
        MOV     R4,#B_CMD1 & 0xff
        MOV     R5,#(B_CMD1 >> 8) & 0xff
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_0:
        JZ      ??SampleApp_MessageMSGCB_0
//  288      {
//  289          
//  290      }
//  291    else if (strcmp(cmd, B_CMD4) == 0)//≈–∂œ÷∏¡Ó «∑ÒŒ™EBE40001
        ; Setup parameters for call to function strcmp
        MOV     R4,#B_CMD4 & 0xff
        MOV     R5,#(B_CMD4 >> 8) & 0xff
        MOV     R2,#cmd & 0xff
        MOV     R3,#(cmd >> 8) & 0xff
        LCALL   ??strcmp?relay
//  292      {
//  293      
//  294      }
//  295    if (strcmp(cmd, B_CMD2) == 0)//≈–∂œ÷∏¡Ó «∑ÒŒ™EBE50000
??SampleApp_MessageMSGCB_0:
        ; Setup parameters for call to function strcmp
        MOV     R4,#B_CMD2 & 0xff
        MOV     R5,#(B_CMD2 >> 8) & 0xff
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_1:
        JZ      ??SampleApp_MessageMSGCB_1
//  296      {
//  297      
//  298      }
//  299    else if (strcmp(cmd, B_CMD5) == 0)//≈–∂œ÷∏¡Ó «∑ÒŒ™EBE50001
        ; Setup parameters for call to function strcmp
        MOV     R4,#B_CMD5 & 0xff
        MOV     R5,#(B_CMD5 >> 8) & 0xff
        MOV     R2,#cmd & 0xff
        MOV     R3,#(cmd >> 8) & 0xff
        LCALL   ??strcmp?relay
//  300      {
//  301      
//  302      }
//  303    if (strcmp(cmd, B_CMD3) == 0)//≈–∂œ÷∏¡Ó «∑ÒŒ™EBE60000
??SampleApp_MessageMSGCB_1:
        ; Setup parameters for call to function strcmp
        MOV     R4,#B_CMD3 & 0xff
        MOV     R5,#(B_CMD3 >> 8) & 0xff
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_2:
        JZ      ??SampleApp_MessageMSGCB_2
//  304      {
//  305      
//  306      }
//  307    else if (strcmp(cmd, B_CMD6) == 0)//≈–∂œ÷∏¡Ó «∑ÒŒ™EBE60001
        ; Setup parameters for call to function strcmp
        MOV     R4,#B_CMD6 & 0xff
        MOV     R5,#(B_CMD6 >> 8) & 0xff
        MOV     R2,#cmd & 0xff
        MOV     R3,#(cmd >> 8) & 0xff
        LCALL   ??strcmp?relay
//  308      {
//  309      
//  310      }
//  311    
//  312 }
??SampleApp_MessageMSGCB_2:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        MOV     R2,#cmd & 0xff
        MOV     R3,#(cmd >> 8) & 0xff
        LCALL   ??strcmp?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7
//  313 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  314 void callback(uint8 port, uint8 event)
callback:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function callback
        CODE
//  315 {}
        ; Saved register size: 0
        ; Auto size: 0
        LJMP    ?BRET
        CFI EndBlock cfiBlock8

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for B_CMD1>`:
        DB "EBE40000"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for B_CMD2>`:
        DB "EBE50000"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for B_CMD3>`:
        DB "EBE60000"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for B_CMD4>`:
        DB "EBE40001"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for B_CMD5>`:
        DB "EBE50001"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for B_CMD6>`:
        DB "EBE60001"

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??callback?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    callback

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SampleApp">`:
        DB "SampleApp"

        END
// 
// 342 bytes in segment BANKED_CODE
//  30 bytes in segment BANK_RELAYS
//  54 bytes in segment XDATA_I
//  54 bytes in segment XDATA_ID
//  26 bytes in segment XDATA_ROM_C
//  62 bytes in segment XDATA_Z
// 
// 426 bytes of CODE  memory
//  26 bytes of CONST memory
// 116 bytes of XDATA memory
//
//Errors: none
//Warnings: 12
