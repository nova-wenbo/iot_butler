###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         27/Mar/2017  15:11:05 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\Source\End #
#                          PointB.c                                           #
#    Command line       =  -f C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\Tools\CC2530DB\f8wEndev.cfg             #
#                          (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS) -f    #
#                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0   #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\Source\End #
#                          PointB.c -D ZIGBEEPRO -D NWK_AUTO_POLL -D          #
#                          ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D            #
#                          xMT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC            #
#                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\E #
#                          nDevicEB1-Pro\List\ -lA C:\Users\lucifer\Desktop\– #
#                          ≠“È\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\EnDevicEB1-Pro\List\        #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\E #
#                          nDevicEB1-Pro\Obj\ -e --debug --core=plain         #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\lucifer\Desktop\– #
#                          ≠“È\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\ -I                         #
#                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\SOURCE\ -I C:\Users\lucifer\Desktop\–≠“È\ZStack- #
#                          CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I            #
#                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\MT\ -I                    #
#                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I           #
#                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I   #
#                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I        #
#                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I          #
#                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\STACK\AF\ -I              #
#                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\STACK\NWK\ -I             #
#                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\STACK\SEC\ -I             #
#                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\STACK\SAPI\ -I            #
#                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\STACK\SYS\ -I             #
#                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\STACK\ZDO\ -I             #
#                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I              #
#                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\ZMAC\ -I                  #
#                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I        #
#                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I        #
#                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I           #
#                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I        #
#                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I   #
#                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGL #
#                          E_CHIP\ -Ohz --require_prototypes                  #
#    List file          =  C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\E #
#                          nDevicEB1-Pro\List\EndPointB.lst                   #
#    Object file        =  C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0- #
#                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\E #
#                          nDevicEB1-Pro\Obj\EndPointB.r51                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\EndPointB.c
      1          
      2          
      3          /*********************************************************************
      4           * INCLUDES
      5           */
      6          #include "OSAL.h"
      7          #include "ZGlobals.h"
      8          #include "AF.h"
      9          #include "aps_groups.h"
     10          #include "ZDApp.h"
     11          
     12          #include "SampleApp.h"
     13          #include "SampleAppHw.h"
     14          
     15          #include "OnBoard.h"
     16          
     17          /* HAL */
     18          #include "hal_lcd.h"
     19          #include "hal_led.h"
     20          #include "hal_key.h"
     21          #include "MT_UART.h"
     22          #include "MT_APP.h"
     23          #include "MT.h"
     24          #include "DHT11.h"
     25          #include <math.h>
     26          #include<string.h>
     27          /*********************************************************************
     28           * GLOBAL VARIABLES
     29           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     30          uint8 cmd[9];
   \                     cmd:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
     31          uint8 B_CMD1[]="EBE40000";
   \                     B_CMD1:
   \   000000                DS 9
   \   000009                REQUIRE `?<Initializer for B_CMD1>`
   \   000009                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     32          uint8 B_CMD2[]="EBE50000";
   \                     B_CMD2:
   \   000000                DS 9
   \   000009                REQUIRE `?<Initializer for B_CMD2>`
   \   000009                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     33          uint8 B_CMD3[]="EBE60000";
   \                     B_CMD3:
   \   000000                DS 9
   \   000009                REQUIRE `?<Initializer for B_CMD3>`
   \   000009                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     34          uint8 B_CMD4[]="EBE40001";
   \                     B_CMD4:
   \   000000                DS 9
   \   000009                REQUIRE `?<Initializer for B_CMD4>`
   \   000009                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     35          uint8 B_CMD5[]="EBE50001";
   \                     B_CMD5:
   \   000000                DS 9
   \   000009                REQUIRE `?<Initializer for B_CMD5>`
   \   000009                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     36          uint8 B_CMD6[]="EBE60001";
   \                     B_CMD6:
   \   000000                DS 9
   \   000009                REQUIRE `?<Initializer for B_CMD6>`
   \   000009                REQUIRE __INIT_XDATA_I
     37          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     38          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     39          {
     40           SAMPLEAPP_PERIODIC_CLUSTERID1,
     41           SAMPLEAPP_PERIODIC_CLUSTERID2,
     42           
     43          };
     44          

   \                                 In  segment XDATA_ROM_C, align 1
     45          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
     46          {
     47            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
     48            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
     49            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
     50            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
     51            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
     52            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     53            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
     54            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     55            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
     56          };
     57          
     58          // This is the Endpoint/Interface description.  It is defined here, but
     59          // filled-in in SampleApp_Init().  Another way to go would be to fill
     60          // in the structure here and make it a "const" (in code space).  The
     61          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     62          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
     63          
     64          /*********************************************************************
     65           * EXTERNAL VARIABLES
     66           */
     67          
     68          /*********************************************************************
     69           * EXTERNAL FUNCTIONS
     70           */
     71          
     72          /*********************************************************************
     73           * LOCAL VARIABLES
     74           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     75          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     76                                    // This variable will be received when
     77                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     78          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     79          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     80          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     81          
     82          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     83          afAddrType_t SampleApp_P2P_DstAddr;      //µ„≤•
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     84          afAddrType_t SampleApp_Periodic_DstAddr;      //π„≤•
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     85          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
     86          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     87          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     88          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     89          
     90          /*********************************************************************
     91           * LOCAL FUNCTIONS
     92           */
     93          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
     94          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
     95          void callback(uint8 port, uint8 event);
     96          /*********************************************************************
     97           * NETWORK LAYER CALLBACKS
     98           */
     99          
    100          /*********************************************************************
    101           * PUBLIC FUNCTIONS
    102           */
    103          
    104          /*********************************************************************
    105           * @fn      SampleApp_Init
    106           *
    107           * @brief   Initialization function for the Generic App Task.
    108           *          This is called during initialization and should contain
    109           *          any application specific initialization (ie. hardware
    110           *          initialization/setup, table initialization, power up
    111           *          notificaiton ... ).
    112           *
    113           * @param   task_id - the ID assigned by OSAL.  This ID should be
    114           *                    used to send messages and set timers.
    115           *
    116           * @return  none
    117           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    118          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    119          { 
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    120            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    121            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    122            SampleApp_TransID = 0;  
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    123            MT_UartInit();                  //¥Æø⁄≥ı ºªØ
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    124            MT_UartRegisterTaskID(task_id); //◊¢≤·¥Æø⁄»ŒŒÒ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    125           
    126            
    127           #if defined ( BUILD_ALL_DEVICES )
    128            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    129            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    130            // together - if they are - we will start up a coordinator. Otherwise,
    131            // the device will start as a router.
    132            if ( readCoordinatorJumper() )
    133              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    134            else
    135              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    136          #endif // BUILD_ALL_DEVICES
    137          
    138          #if defined ( HOLD_AUTO_START )
    139            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    140            //  from starting the device and wait for the application to
    141            //  start the device.
    142            ZDOInitDevice(0);
    143          #endif
    144            
    145            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µ„≤• 
   \   00001E   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   000021   7402         MOV     A,#0x2
   \   000023   F0           MOVX    @DPTR,A
    146            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
   \   000024   A3           INC     DPTR
   \   000025   7414         MOV     A,#0x14
   \   000027   F0           MOVX    @DPTR,A
    147            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //¡Ω÷’∂À“‘¥Àµÿ÷∑Ω´≤‚¡ø÷µ∑¢ÀÕµΩ–≠µ˜∆˜
   \   000028   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   00002B   E4           CLR     A
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
   \   00002E   F0           MOVX    @DPTR,A
    148            
    149          
    150            //◊∞‘ÿ√Ë ˆ∑˚–≈œ¢£¨ƒ¨»œ°£
    151            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00002F   90....       MOV     DPTR,#SampleApp_epDesc
   \   000032   7414         MOV     A,#0x14
   \   000034   F0           MOVX    @DPTR,A
    152            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000035   A3           INC     DPTR
   \   000036   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   00003C   F0           MOVX    @DPTR,A
    153            SampleApp_epDesc.simpleDesc
    154                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00003D   A3           INC     DPTR
   \   00003E   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000044   F0           MOVX    @DPTR,A
    155            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000045   A3           INC     DPTR
   \   000046   E4           CLR     A
   \   000047   F0           MOVX    @DPTR,A
    156          
    157            // ◊¢≤·∂Àµ„√Ë ˆ∑˚
    158            afRegister( &SampleApp_epDesc );
   \   000048                ; Setup parameters for call to function afRegister
   \   000048   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00004A   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00004C   12....       LCALL   ??afRegister?relay
    159          
    160            // Register for all key events - This app will handle all key events
    161            RegisterForKeys( SampleApp_TaskID );
   \   00004F                ; Setup parameters for call to function RegisterForKeys
   \   00004F   90....       MOV     DPTR,#SampleApp_TaskID
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F9           MOV     R1,A
   \   000054   12....       LCALL   ??RegisterForKeys?relay
    162           
    163          #if defined ( LCD_SUPPORTED )
    164            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   000057                ; Setup parameters for call to function HalLcdWriteString
   \   000057   7901         MOV     R1,#0x1
   \   000059   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   00005B   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   00005D   12....       LCALL   ??HalLcdWriteString?relay
    165          #endif
    166          }
   \   000060   7F01         MOV     R7,#0x1
   \   000062   02....       LJMP    ?BANKED_LEAVE_XDATA
    167          
    168          /*********************************************************************
    169           * @fn      ”¶”√≤„»ŒŒÒ¬÷—Ø∫Ø ˝£¨À˘”–»ŒŒÒ∂º‘⁄’‚¿ÔÀ≥–Ú÷¥––
    170           *
    171           * @brief   Generic Application Task event processor.  This function
    172           *          is called to process all events for the task.  Events
    173           *          include timers, messages and any other user defined events.
    174           *
    175           * @param   task_id  - The OSAL assigned task ID.
    176           * @param   events - events to process.  This is a bit map and can
    177           *                   contain more than one event.
    178           *
    179           * @return  none
    180           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    181          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    182          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    183            afIncomingMSGPacket_t *MSGpkt;
    184            (void)task_id;  // Intentionally unreferenced parameter
    185          
    186            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   6044         JZ      ??SampleApp_ProcessEvent_0
    187            {
    188              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000E                ; Setup parameters for call to function osal_msg_receive
   \   00000E   800D         SJMP    ??SampleApp_ProcessEvent_1
    189              while ( MSGpkt )
    190              {
    191                switch ( MSGpkt->hdr.event )
    192                {
    193                  // ∞¥º¸»ŒŒÒ£¨Œ¥ π”√
    194                  case KEY_CHANGE:
    195                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    196                    break;
    197          
    198                  //Ω” ’µΩŒﬁœﬂœ˚œ¢£¨µ˜”√œ˚œ¢Ω‚Œˆ∫Ø ˝
    199                  case AF_INCOMING_MSG_CMD: 
    200                    SampleApp_MessageMSGCB( MSGpkt );
    201                    break;
    202          
    203                  // ”≤º˛≥ı ºªØ
    204                  case ZDO_STATE_CHANGE:
    205                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   90....       MOV     DPTR,#SampleApp_NwkState
   \   000015   F0           MOVX    @DPTR,A
    206                    if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
    207                        
    208                         //÷ª”–Œ¬∂»÷’∂À∆Ù∂Ø1.1s∂® ±—≠ª∑∑¢ÀÕŒ¬ ™∂»
    209                         (SampleApp_NwkState == DEV_END_DEVICE) )
    210                    {
    211             
    212                    }
    213                    else
    214                    {
    215                      // Device is no longer in the network
    216                    }
    217                    break;
    218          
    219                  default:
    220                    break;
    221                }
    222          
    223                // Release the memory
    224                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_3:
   \   000016                ; Setup parameters for call to function osal_msg_deallocate
   \   000016   EE           MOV     A,R6
   \   000017   FA           MOV     R2,A
   \   000018   EF           MOV     A,R7
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   ??osal_msg_deallocate?relay
    225          
    226                // Next - if one is available
    227                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00001D                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00001D   90....       MOV     DPTR,#SampleApp_TaskID
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   12....       LCALL   ??osal_msg_receive?relay
   \   000025   8A..         MOV     ?V0 + 2,R2
   \   000027   8B..         MOV     ?V0 + 3,R3
   \   000029   AE..         MOV     R6,?V0 + 2
   \   00002B   AF..         MOV     R7,?V0 + 3
   \   00002D   EE           MOV     A,R6
   \   00002E   4F           ORL     A,R7
   \   00002F   6018         JZ      ??SampleApp_ProcessEvent_4
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   E0           MOVX    A,@DPTR
   \   000036   24E6         ADD     A,#-0x1a
   \   000038   6006         JZ      ??SampleApp_ProcessEvent_5
   \   00003A   2449         ADD     A,#0x49
   \   00003C   60D2         JZ      ??SampleApp_ProcessEvent_2
   \   00003E   80D6         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_5:
   \   000040                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000040   EE           MOV     A,R6
   \   000041   FA           MOV     R2,A
   \   000042   EF           MOV     A,R7
   \   000043   FB           MOV     R3,A
   \   000044   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000047   80CD         SJMP    ??SampleApp_ProcessEvent_3
    228              }
    229          
    230              // return unprocessed events
    231              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_4:
   \   000049   AA..         MOV     R2,?V0 + 0
   \   00004B   E5..         MOV     A,?V0 + 1
   \   00004D   6480         XRL     A,#0x80
   \   00004F   FB           MOV     R3,A
   \   000050   800E         SJMP    ??SampleApp_ProcessEvent_6
    232            }
    233          
    234            // Send a message out - This event is generated by a timer
    235            //  (setup in SampleApp_Init()).
    236            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000052   EA           MOV     A,R2
   \   000053   A2E0         MOV     C,0xE0 /* A   */.0
   \   000055   5005         JNC     ??SampleApp_ProcessEvent_7
    237            {
    238             
    239              // return unprocessed events
    240              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   000057   6401         XRL     A,#0x1
   \   000059   FA           MOV     R2,A
   \   00005A   8004         SJMP    ??SampleApp_ProcessEvent_6
    241            }
    242          
    243            // Discard unknown events
    244            return 0;
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C   7A00         MOV     R2,#0x0
   \   00005E   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_6:
   \   000060   7F04         MOV     R7,#0x4
   \   000062   02....       LJMP    ?BANKED_LEAVE_XDATA
    245          }
    246          
    247          /*********************************************************************
    248           * Event Generation Functions
    249           */
    250          /*********************************************************************
    251           * @fn      SampleApp_HandleKeys
    252           *
    253           * @brief   Handles all key events for this device.
    254           *
    255           * @param   shift - true if in shift/alt.
    256           * @param   keys - bit field for key events. Valid entries:
    257           *                 HAL_KEY_SW_2
    258           *                 HAL_KEY_SW_1
    259           *
    260           * @return  none
    261           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    262          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    263          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    264           //Œ¥ π”√£¨≤ªµ√…æ≥˝ 
    265          }
   \   000000   02....       LJMP    ?BRET
    266          
    267          /*********************************************************************
    268           * LOCAL FUNCTIONS
    269           */
    270          
    271          /*********************************************************************
    272           * @fn      SampleApp_MessageMSGCB
    273           *
    274           * @brief   Data message processor callback.  This function processes
    275           *          any incoming data - probably from other devices.  So, based
    276           *          on cluster ID, perform the intended action.
    277           *
    278           * @param   none
    279           *
    280           * @return  none
    281           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    282          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    283          { 
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    284             memcpy(cmd, pkt->cmd.Data,8);
   \   000005                ; Setup parameters for call to function memcpy
   \   000005   75..08       MOV     ?V0 + 0,#0x8
   \   000008   75..00       MOV     ?V0 + 1,#0x0
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   EA           MOV     A,R2
   \   000011   2421         ADD     A,#0x21
   \   000013   F582         MOV     DPL,A
   \   000015   EB           MOV     A,R3
   \   000016   3400         ADDC    A,#0x0
   \   000018   F583         MOV     DPH,A
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FC           MOV     R4,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   FD           MOV     R5,A
   \   00001F   7A..         MOV     R2,#cmd & 0xff
   \   000021   7B..         MOV     R3,#(cmd >> 8) & 0xff
   \   000023   12....       LCALL   ??memcpy?relay
   \   000026   7402         MOV     A,#0x2
   \   000028   12....       LCALL   ?DEALLOC_XSTACK8
    285             HalUARTWrite(0, cmd, 8); // ‰≥ˆΩ” ’µΩµƒ ˝æ›µΩµ•∆¨ª˙
   \   00002B                ; Setup parameters for call to function HalUARTWrite
   \   00002B   7C08         MOV     R4,#0x8
   \   00002D   7D00         MOV     R5,#0x0
   \   00002F   7A..         MOV     R2,#cmd & 0xff
   \   000031   7B..         MOV     R3,#(cmd >> 8) & 0xff
   \   000033   7900         MOV     R1,#0x0
   \   000035   12....       LCALL   ??HalUARTWrite?relay
    286             //“‘œ¬¥˙¬Î∑÷÷ß£¨∂‘”¶¡Ù∏ˆ÷∏∂®¡Ù◊˜¿©’π π”√°£
    287             if (strcmp(cmd, B_CMD1) == 0)//≈–∂œ÷∏¡Ó «∑ÒŒ™EBE40000
                               ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"

     if (strcmp(cmd, B_CMD1) == 0)//≈–∂œ÷∏¡Ó «∑ÒŒ™EBE40000
                     ^
"C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\EndPointB.c",287  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \   000038                ; Setup parameters for call to function strcmp
   \   000038   7C..         MOV     R4,#B_CMD1 & 0xff
   \   00003A   7D..         MOV     R5,#(B_CMD1 >> 8) & 0xff
   \   00003C   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00003F   600B         JZ      ??SampleApp_MessageMSGCB_0
    288               {
    289                   
    290               }
    291             else if (strcmp(cmd, B_CMD4) == 0)//≈–∂œ÷∏¡Ó «∑ÒŒ™EBE40001
                                    ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"

     else if (strcmp(cmd, B_CMD4) == 0)//≈–∂œ÷∏¡Ó «∑ÒŒ™EBE40001
                          ^
"C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\EndPointB.c",291  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \   000041                ; Setup parameters for call to function strcmp
   \   000041   7C..         MOV     R4,#B_CMD4 & 0xff
   \   000043   7D..         MOV     R5,#(B_CMD4 >> 8) & 0xff
   \   000045   7A..         MOV     R2,#cmd & 0xff
   \   000047   7B..         MOV     R3,#(cmd >> 8) & 0xff
   \   000049   12....       LCALL   ??strcmp?relay
    292               {
    293               
    294               }
    295             if (strcmp(cmd, B_CMD2) == 0)//≈–∂œ÷∏¡Ó «∑ÒŒ™EBE50000
                               ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"

     if (strcmp(cmd, B_CMD2) == 0)//≈–∂œ÷∏¡Ó «∑ÒŒ™EBE50000
                     ^
"C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\EndPointB.c",295  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \                     ??SampleApp_MessageMSGCB_0:
   \   00004C                ; Setup parameters for call to function strcmp
   \   00004C   7C..         MOV     R4,#B_CMD2 & 0xff
   \   00004E   7D..         MOV     R5,#(B_CMD2 >> 8) & 0xff
   \   000050   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000053   600B         JZ      ??SampleApp_MessageMSGCB_1
    296               {
    297               
    298               }
    299             else if (strcmp(cmd, B_CMD5) == 0)//≈–∂œ÷∏¡Ó «∑ÒŒ™EBE50001
                                    ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"

     else if (strcmp(cmd, B_CMD5) == 0)//≈–∂œ÷∏¡Ó «∑ÒŒ™EBE50001
                          ^
"C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\EndPointB.c",299  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \   000055                ; Setup parameters for call to function strcmp
   \   000055   7C..         MOV     R4,#B_CMD5 & 0xff
   \   000057   7D..         MOV     R5,#(B_CMD5 >> 8) & 0xff
   \   000059   7A..         MOV     R2,#cmd & 0xff
   \   00005B   7B..         MOV     R3,#(cmd >> 8) & 0xff
   \   00005D   12....       LCALL   ??strcmp?relay
    300               {
    301               
    302               }
    303             if (strcmp(cmd, B_CMD3) == 0)//≈–∂œ÷∏¡Ó «∑ÒŒ™EBE60000
                               ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"

     if (strcmp(cmd, B_CMD3) == 0)//≈–∂œ÷∏¡Ó «∑ÒŒ™EBE60000
                     ^
"C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\EndPointB.c",303  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \                     ??SampleApp_MessageMSGCB_1:
   \   000060                ; Setup parameters for call to function strcmp
   \   000060   7C..         MOV     R4,#B_CMD3 & 0xff
   \   000062   7D..         MOV     R5,#(B_CMD3 >> 8) & 0xff
   \   000064   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000067   600B         JZ      ??SampleApp_MessageMSGCB_2
    304               {
    305               
    306               }
    307             else if (strcmp(cmd, B_CMD6) == 0)//≈–∂œ÷∏¡Ó «∑ÒŒ™EBE60001
                                    ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"

     else if (strcmp(cmd, B_CMD6) == 0)//≈–∂œ÷∏¡Ó «∑ÒŒ™EBE60001
                          ^
"C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\EndPointB.c",307  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \   000069                ; Setup parameters for call to function strcmp
   \   000069   7C..         MOV     R4,#B_CMD6 & 0xff
   \   00006B   7D..         MOV     R5,#(B_CMD6 >> 8) & 0xff
   \   00006D   7A..         MOV     R2,#cmd & 0xff
   \   00006F   7B..         MOV     R3,#(cmd >> 8) & 0xff
   \   000071   12....       LCALL   ??strcmp?relay
    308               {
    309               
    310               }
    311             
    312          }
   \                     ??SampleApp_MessageMSGCB_2:
   \   000074   7F02         MOV     R7,#0x2
   \   000076   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7A..         MOV     R2,#cmd & 0xff
   \   000002   7B..         MOV     R3,#(cmd >> 8) & 0xff
   \   000004   12....       LCALL   ??strcmp?relay
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EA           MOV     A,R2
   \   00000A   45..         ORL     A,?V0 + 1
   \   00000C   22           RET
    313          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    314          void callback(uint8 port, uint8 event)
   \                     callback:
    315          {}
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for B_CMD1>`:
   \   000000   45424534     DB "EBE40000"
   \            30303030
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for B_CMD2>`:
   \   000000   45424535     DB "EBE50000"
   \            30303030
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for B_CMD3>`:
   \   000000   45424536     DB "EBE60000"
   \            30303030
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for B_CMD4>`:
   \   000000   45424534     DB "EBE40001"
   \            30303031
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for B_CMD5>`:
   \   000000   45424535     DB "EBE50001"
   \            30303031
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for B_CMD6>`:
   \   000000   45424536     DB "EBE60001"
   \            30303031
   \            00      

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??callback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    callback

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   Maximum stack usage in bytes:

     Function                    ISTACK PSTACK XSTACK
     --------                    ------ ------ ------
     SampleApp_HandleKeys            0      0      0
     SampleApp_Init                  0      0      9
       -> MT_UartInit                0      0     18
       -> MT_UartRegisterTaskID      0      0     18
       -> afRegister                 0      0     18
       -> RegisterForKeys            0      0     18
       -> HalLcdWriteString          0      0     18
     SampleApp_MessageMSGCB          0      0     24
       -> memcpy                     0      0     24
       -> HalUARTWrite               0      0     20
       -> strcmp                     0      0     20
       -> strcmp                     0      0     20
       -> strcmp                     0      0     20
       -> strcmp                     0      0     20
       -> strcmp                     0      0     20
       -> strcmp                     0      0     20
     SampleApp_ProcessEvent          0      0     12
       -> osal_msg_receive           0      0     24
       -> osal_msg_deallocate        0      0     24
       -> osal_msg_receive           0      0     24
       -> SampleApp_MessageMSGCB     0      0     24
     callback                        0      0      0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     cmd                               9
     B_CMD1                            9
     B_CMD2                            9
     B_CMD3                            9
     B_CMD4                            9
     B_CMD5                            9
     B_CMD6                            9
     SampleApp_ClusterList             4
     SampleApp_SimpleDesc             12
     SampleApp_epDesc                  6
     SampleApp_TaskID                  1
     SampleApp_NwkState                1
     SampleApp_TransID                 1
     SampleApp_P2P_DstAddr            12
     SampleApp_Periodic_DstAddr       12
     SampleApp_Group                  18
     SampleAppPeriodicCounter          1
     SampleAppFlashCounter             1
     SampleApp_Init                  101
     SampleApp_ProcessEvent          101
     SampleApp_HandleKeys              3
     SampleApp_MessageMSGCB          121
     ?Subroutine0                     13
     callback                          3
     ?<Initializer for B_CMD1>         9
     ?<Initializer for B_CMD2>         9
     ?<Initializer for B_CMD3>         9
     ?<Initializer for B_CMD4>         9
     ?<Initializer for B_CMD5>         9
     ?<Initializer for B_CMD6>         9
     ??SampleApp_Init?relay            6
     ??SampleApp_ProcessEvent?relay    6
     ??SampleApp_HandleKeys?relay      6
     ??SampleApp_MessageMSGCB?relay    6
     ??callback?relay                  6
     ?<Constant "SampleApp">          10

 
 342 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
  54 bytes in segment XDATA_I
  54 bytes in segment XDATA_ID
  26 bytes in segment XDATA_ROM_C
  62 bytes in segment XDATA_Z
 
 426 bytes of CODE  memory
  26 bytes of CONST memory
 116 bytes of XDATA memory

Errors: none
Warnings: 12
