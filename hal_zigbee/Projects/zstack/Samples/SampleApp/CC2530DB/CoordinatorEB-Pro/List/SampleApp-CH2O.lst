###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         18/Dec/2015  21:26:05 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\Administrator\Desktop\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 #
#                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples #
#                          \SampleApp\Source\SampleApp-CH2O.c                 #
#    Command line       =  -f C:\Users\Administrator\Desktop\7.ÎÂÊª¶È´«¸ÐÆ÷DH #
#                          T11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8w #
#                          Coord.cfg (-DCPU32MHZ -DROOT=__near_func           #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          C:\Users\Administrator\Desktop\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 #
#                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCon #
#                          fig.cfg (-DSECURE=0 -DZG_SECURE_DYNAMIC=0          #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          C:\Users\Administrator\Desktop\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 #
#                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples #
#                          \SampleApp\Source\SampleApp-CH2O.c -D ZIGBEEPRO    #
#                          -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D         #
#                          xMT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC            #
#                          C:\Users\Administrator\Desktop\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 #
#                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\CoordinatorEB-Pro\List\ -lA    #
#                          C:\Users\Administrator\Desktop\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 #
#                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\CoordinatorEB-Pro\List\        #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          C:\Users\Administrator\Desktop\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 #
#                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\CoordinatorEB-Pro\Obj\ -e      #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\Administrator\Desktop\7.ÎÂÊª¶È´«¸ÐÆ÷DH #
#                          T11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\ -I                         #
#                          C:\Users\Administrator\Desktop\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 #
#                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\SOURCE\ -I                  #
#                          C:\Users\Administrator\Desktop\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 #
#                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I    #
#                          C:\Users\Administrator\Desktop\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 #
#                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\  #
#                          -I C:\Users\Administrator\Desktop\7.ÎÂÊª¶È´«¸ÐÆ÷DH #
#                          T11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\H #
#                          AL\INCLUDE\ -I C:\Users\Administrator\Desktop\7.ÎÂ #
#                          Êª¶È´«¸ÐÆ÷DHT11\ZStack-CC2530-2.3.0-1.4.0\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\HAL\TARGET\CC2530EB\ -I                 #
#                          C:\Users\Administrator\Desktop\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 #
#                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL #
#                          \MCU\CCSOC\ -I C:\Users\Administrator\Desktop\7.ÎÂ #
#                          Êª¶È´«¸ÐÆ÷DHT11\ZStack-CC2530-2.3.0-1.4.0\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\OSAL\INCLUDE\ -I                        #
#                          C:\Users\Administrator\Desktop\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 #
#                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STAC #
#                          K\AF\ -I C:\Users\Administrator\Desktop\7.ÎÂÊª¶È´« #
#                          ¸ÐÆ÷DHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\STACK\NWK\ -I C:\Users\Administrator\Desktop\ #
#                          7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack-CC2530-2.3.0-1.4.0\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\COMPONENTS\STACK\SEC\ -I                       #
#                          C:\Users\Administrator\Desktop\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 #
#                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STAC #
#                          K\SAPI\ -I C:\Users\Administrator\Desktop\7.ÎÂÊª¶È #
#                          ´«¸ÐÆ÷DHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SYS\ -I C:\Users\Administrator\Deskto #
#                          p\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack-CC2530-2.3.0-1.4.0\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\STACK\ZDO\ -I                     #
#                          C:\Users\Administrator\Desktop\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 #
#                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC #
#                          \F8W\ -I C:\Users\Administrator\Desktop\7.ÎÂÊª¶È´« #
#                          ¸ÐÆ÷DHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\ZMAC\ -I C:\Users\Administrator\Desktop\7.ÎÂÊ #
#                          ª¶È´«¸ÐÆ÷DHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\SERVICES\SADDR\ -I                       #
#                          C:\Users\Administrator\Desktop\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 #
#                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERV #
#                          ICES\SDATA\ -I C:\Users\Administrator\Desktop\7.ÎÂ #
#                          Êª¶È´«¸ÐÆ÷DHT11\ZStack-CC2530-2.3.0-1.4.0\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\MAC\INCLUDE\ -I                         #
#                          C:\Users\Administrator\Desktop\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 #
#                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\ #
#                          HIGH_LEVEL\ -I C:\Users\Administrator\Desktop\7.ÎÂ #
#                          Êª¶È´«¸ÐÆ÷DHT11\ZStack-CC2530-2.3.0-1.4.0\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\MAC\LOW_LEVEL\srf04\ -I                 #
#                          C:\Users\Administrator\Desktop\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 #
#                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\ #
#                          LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz                  #
#                          --require_prototypes                               #
#    List file          =  C:\Users\Administrator\Desktop\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 #
#                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\CoordinatorEB-Pro\List\SampleA #
#                          pp-CH2O.lst                                        #
#    Object file        =  C:\Users\Administrator\Desktop\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 #
#                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\CoordinatorEB-Pro\Obj\SampleAp #
#                          p-CH2O.r51                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp-CH2O.c
      1          
      2          
      3          /*********************************************************************
      4           * INCLUDES
      5           */
      6          #include "OSAL.h"
      7          #include "ZGlobals.h"
      8          #include "AF.h"
      9          #include "aps_groups.h"
     10          #include "ZDApp.h"
     11          
     12          #include "SampleApp.h"
     13          #include "SampleAppHw.h"
     14          
     15          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1
     16          
     17          /* HAL */
     18          #include "hal_lcd.h"
     19          #include "hal_led.h"
     20          #include "hal_key.h"
     21          #include "MT_UART.h"
     22          #include "MT_APP.h"
     23          #include "MT.h"
     24          #include "DHT11.h"
     25          
     26          
     27          /*********************************************************************
     28           * GLOBAL VARIABLES
     29           */
     30          
     31          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     32          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
     33          {
     34            SAMPLEAPP_PERIODIC_CLUSTERID,
     35            
     36          };
     37          

   \                                 In  segment XDATA_ROM_C, align 1
     38          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW SampleApp_ClusterList
     39          {
     40            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
     41            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
     42            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
     43            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
     44            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
     45            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     46            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
     47            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     48            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
     49          };
     50          
     51          // This is the Endpoint/Interface description.  It is defined here, but
     52          // filled-in in SampleApp_Init().  Another way to go would be to fill
     53          // in the structure here and make it a "const" (in code space).  The
     54          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     55          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
     56          
     57          /*********************************************************************
     58           * EXTERNAL VARIABLES
     59           */
     60          
     61          /*********************************************************************
     62           * EXTERNAL FUNCTIONS
     63           */
     64          
     65          /*********************************************************************
     66           * LOCAL VARIABLES
     67           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     68          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     69                                    // This variable will be received when
     70                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     71          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     72          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     73          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     74          
     75          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     76          afAddrType_t SampleApp_P2P_DstAddr;      //µã²¥
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     77          afAddrType_t SampleApp_Periodic_DstAddr;      //¹ã²¥
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     78          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
     79          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     80          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     81          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     82          
     83          /*********************************************************************
     84           * LOCAL FUNCTIONS
     85           */
     86          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
     87          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
     88          void SampleApp_Send_P2P_Message(void);
     89          void callback(uint8 port,uint8 event);
     90          /*********************************************************************
     91           * NETWORK LAYER CALLBACKS
     92           */
     93          
     94          /*********************************************************************
     95           * PUBLIC FUNCTIONS
     96           */
     97          
     98          /*********************************************************************
     99           * @fn      SampleApp_Init
    100           *
    101           * @brief   Initialization function for the Generic App Task.
    102           *          This is called during initialization and should contain
    103           *          any application specific initialization (ie. hardware
    104           *          initialization/setup, table initialization, power up
    105           *          notificaiton ... ).
    106           *
    107           * @param   task_id - the ID assigned by OSAL.  This ID should be
    108           *                    used to send messages and set timers.
    109           *
    110           * @return  none
    111           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    112          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    113          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    114            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    115            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    116            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    117            
    118            MT_UartInit();                  //´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    119            MT_UartRegisterTaskID(task_id); //×¢²á´®¿ÚÈÎÎñ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    120            P0SEL &= 0xBF;                  //P0_6ÅäÖÃ³ÉÍ¨ÓÃio
   \   00001E   53F3BF       ANL     0xf3,#0xbf
    121            
    122            
    123           #if defined ( BUILD_ALL_DEVICES )
    124            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    125            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    126            // together - if they are - we will start up a coordinator. Otherwise,
    127            // the device will start as a router.
    128            if ( readCoordinatorJumper() )
    129              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    130            else
    131              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    132          #endif // BUILD_ALL_DEVICES
    133          
    134          #if defined ( HOLD_AUTO_START )
    135            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    136            //  from starting the device and wait for the application to
    137            //  start the device.
    138            ZDOInitDevice(0);
    139          #endif
    140            
    141            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥ 
   \   000021   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   000024   7402         MOV     A,#0x2
   \   000026   F0           MOVX    @DPTR,A
    142            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
   \   000027   A3           INC     DPTR
   \   000028   7414         MOV     A,#0x14
   \   00002A   F0           MOVX    @DPTR,A
    143            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //·¢¸øÐ­µ÷Æ÷
   \   00002B   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   00002E   E4           CLR     A
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   F0           MOVX    @DPTR,A
    144            
    145            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//¹ã²¥
   \   000032   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000035   740F         MOV     A,#0xf
   \   000037   F0           MOVX    @DPTR,A
    146            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000038   A3           INC     DPTR
   \   000039   7414         MOV     A,#0x14
   \   00003B   F0           MOVX    @DPTR,A
    147            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;       //·¢¸øÖÕ¶Ë
   \   00003C   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00003F   74FF         MOV     A,#-0x1
   \   000041   F0           MOVX    @DPTR,A
   \   000042   A3           INC     DPTR
   \   000043   F0           MOVX    @DPTR,A
    148          
    149            // Fill out the endpoint description.
    150            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000044   90....       MOV     DPTR,#SampleApp_epDesc
   \   000047   7414         MOV     A,#0x14
   \   000049   F0           MOVX    @DPTR,A
    151            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   00004A   A3           INC     DPTR
   \   00004B   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000051   F0           MOVX    @DPTR,A
    152            SampleApp_epDesc.simpleDesc
    153                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000052   A3           INC     DPTR
   \   000053   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000059   F0           MOVX    @DPTR,A
    154            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   00005A   A3           INC     DPTR
   \   00005B   E4           CLR     A
   \   00005C   F0           MOVX    @DPTR,A
    155          
    156            // Register the endpoint description with the AF
    157            afRegister( &SampleApp_epDesc );
   \   00005D                ; Setup parameters for call to function afRegister
   \   00005D   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00005F   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000061   12....       LCALL   ??afRegister?relay
    158          
    159            // Register for all key events - This app will handle all key events
    160            RegisterForKeys( SampleApp_TaskID );
   \   000064                ; Setup parameters for call to function RegisterForKeys
   \   000064   90....       MOV     DPTR,#SampleApp_TaskID
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F9           MOV     R1,A
   \   000069   12....       LCALL   ??RegisterForKeys?relay
    161          
    162            // By default, all devices start out in Group 1
    163            SampleApp_Group.ID = 0x0001;
   \   00006C   90....       MOV     DPTR,#SampleApp_Group
   \   00006F   7401         MOV     A,#0x1
   \   000071   F0           MOVX    @DPTR,A
   \   000072   A3           INC     DPTR
   \   000073   E4           CLR     A
   \   000074   F0           MOVX    @DPTR,A
    164            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   000075                ; Setup parameters for call to function osal_memcpy
   \   000075   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   000078   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   00007B   F5..         MOV     ?V0 + 2,A
   \   00007D   78..         MOV     R0,#?V0 + 0
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000082   7C07         MOV     R4,#0x7
   \   000084   7D00         MOV     R5,#0x0
   \   000086   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   000088   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   00008A   12....       LCALL   ??Subroutine3_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00008D   12....       LCALL   ?DEALLOC_XSTACK8
    165            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   000090                ; Setup parameters for call to function aps_AddGroup
   \   000090   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000092   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000094   7914         MOV     R1,#0x14
   \   000096   12....       LCALL   ??aps_AddGroup?relay
    166          
    167          #if defined ( LCD_SUPPORTED )
    168            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   000099                ; Setup parameters for call to function HalLcdWriteString
   \   000099   7901         MOV     R1,#0x1
   \   00009B   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   00009D   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   00009F   12....       LCALL   ??HalLcdWriteString?relay
    169          #endif
    170          }
   \   0000A2                REQUIRE ?Subroutine0
   \   0000A2                REQUIRE P0SEL
   \   0000A2                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine3_0:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET
    171          
    172          /*********************************************************************
    173           * @fn      SampleApp_ProcessEvent
    174           *
    175           * @brief   Generic Application Task event processor.  This function
    176           *          is called to process all events for the task.  Events
    177           *          include timers, messages and any other user defined events.
    178           *
    179           * @param   task_id  - The OSAL assigned task ID.
    180           * @param   events - events to process.  This is a bit map and can
    181           *                   contain more than one event.
    182           *
    183           * @return  none
    184           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    185          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    186          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    187            afIncomingMSGPacket_t *MSGpkt;
    188            (void)task_id;  // Intentionally unreferenced parameter
    189          
    190            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   605C         JZ      ??SampleApp_ProcessEvent_0
    191            {
    192              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    193              while ( MSGpkt )
    194              {
    195                switch ( MSGpkt->hdr.event )
    196                {
    197                  // Received when a key is pressed
    198                  case KEY_CHANGE:
    199                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    200                    break;
    201          
    202                  // Received when a messages is received (OTA) for this endpoint
    203                  case AF_INCOMING_MSG_CMD:
    204                    SampleApp_MessageMSGCB( MSGpkt );
    205                    break;
    206          
    207                  // Received whenever the device changes state in the network
    208                  case ZDO_STATE_CHANGE:
    209                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    210                    if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
    211                           (SampleApp_NwkState == DEV_ROUTER)
    212                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    213                    {
    214                      // Start sending the periodic message in a regular interval.
    215                      osal_start_timerEx( SampleApp_TaskID,
    216                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    217                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7C4C         MOV     R4,#0x4c
   \   000020   7D04         MOV     R5,#0x4
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    218                    }
    219                    else
    220                    {
    221                      // Device is no longer in the network
    222                    }
    223                    break;
    224          
    225                  default:
    226                    break;
    227                }
    228          
    229                // Release the memory
    230                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    231          
    232                // Next - if one is available
    233                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   601A         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   6006         JZ      ??SampleApp_ProcessEvent_6
   \   000052   2449         ADD     A,#0x49
   \   000054   60B9         JZ      ??SampleApp_ProcessEvent_2
   \   000056   80D6         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000058                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000058   AA..         MOV     R2,?V0 + 0
   \   00005A   AB..         MOV     R3,?V0 + 1
   \   00005C   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00005F   80CD         SJMP    ??SampleApp_ProcessEvent_4
    234              }
    235          
    236              // return unprocessed events
    237              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000061   EE           MOV     A,R6
   \   000062   FA           MOV     R2,A
   \   000063   EF           MOV     A,R7
   \   000064   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_7:
   \   000066   FB           MOV     R3,A
   \   000067   802A         SJMP    ??SampleApp_ProcessEvent_8
    238            }
    239          
    240            // Send a message out - This event is generated by a timer
    241            //  (setup in SampleApp_Init()).
    242            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000069   EE           MOV     A,R6
   \   00006A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00006C   5021         JNC     ??SampleApp_ProcessEvent_9
    243            {
    244             
    245              SampleApp_Send_P2P_Message();
   \   00006E                ; Setup parameters for call to function SampleApp_Send_P2P_Message
   \   00006E   12....       LCALL   ??SampleApp_Send_P2P_Message?relay
    246          
    247              // Setup to send message again in normal period (+ a little jitter)
    248              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    249                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000071                ; Setup parameters for call to function osal_rand
   \   000071   12....       LCALL   ??osal_rand?relay
   \   000074                ; Setup parameters for call to function osal_start_timerEx
   \   000074   EA           MOV     A,R2
   \   000075   244C         ADD     A,#0x4c
   \   000077   FC           MOV     R4,A
   \   000078   E4           CLR     A
   \   000079   3404         ADDC    A,#0x4
   \   00007B   FD           MOV     R5,A
   \   00007C   7A01         MOV     R2,#0x1
   \   00007E   7B00         MOV     R3,#0x0
   \   000080   90....       MOV     DPTR,#SampleApp_TaskID
   \   000083   E0           MOVX    A,@DPTR
   \   000084   F9           MOV     R1,A
   \   000085   12....       LCALL   ??osal_start_timerEx?relay
    250          
    251              // return unprocessed events
    252              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   000088   EE           MOV     A,R6
   \   000089   6401         XRL     A,#0x1
   \   00008B   FA           MOV     R2,A
   \   00008C   EF           MOV     A,R7
   \   00008D   80D7         SJMP    ??SampleApp_ProcessEvent_7
    253            }
    254          
    255            // Discard unknown events
    256            return 0;
   \                     ??SampleApp_ProcessEvent_9:
   \   00008F   7A00         MOV     R2,#0x0
   \   000091   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_8:
   \   000093   7F04         MOV     R7,#0x4
   \   000095   02....       LJMP    ?BANKED_LEAVE_XDATA
    257          }
    258          
    259          /*********************************************************************
    260           * Event Generation Functions
    261           */
    262          /*********************************************************************
    263           * @fn      SampleApp_HandleKeys
    264           *
    265           * @brief   Handles all key events for this device.
    266           *
    267           * @param   shift - true if in shift/alt.
    268           * @param   keys - bit field for key events. Valid entries:
    269           *                 HAL_KEY_SW_2
    270           *                 HAL_KEY_SW_1
    271           *
    272           * @return  none
    273           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    274          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    275          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    276            
    277          }
   \   000000   02....       LJMP    ?BRET
    278          
    279          /*********************************************************************
    280           * LOCAL FUNCTIONS
    281           */
    282          
    283          /*********************************************************************
    284           * @fn      SampleApp_MessageMSGCB
    285           *
    286           * @brief   Data message processor callback.  This function processes
    287           *          any incoming data - probably from other devices.  So, based
    288           *          on cluster ID, perform the intended action.
    289           *
    290           * @param   none
    291           *
    292           * @return  none
    293           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    294          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    295          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    296            //uint16 flashTime;
    297          
    298            switch ( pkt->clusterId )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   6404         XRL     A,#0x4
   \   000014   7002         JNZ     ??SampleApp_MessageMSGCB_0
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   000018   703D         JNZ     ??SampleApp_MessageMSGCB_1
    299            {
    300              case SAMPLEAPP_P2P_CLUSTERID:
    301                HalUARTWrite(0, "Tem&Hum:", 8);       //ÌáÊ¾½ÓÊÕµ½Êý¾Ý
   \   00001A                ; Setup parameters for call to function HalUARTWrite
   \   00001A   7C08         MOV     R4,#0x8
   \   00001C   7D00         MOV     R5,#0x0
   \   00001E   7A..         MOV     R2,#`?<Constant "Tem&Hum:">` & 0xff
   \   000020   7B..         MOV     R3,#(`?<Constant "Tem&Hum:">` >> 8) & 0xff
   \   000022   7900         MOV     R1,#0x0
   \   000024   12....       LCALL   ??HalUARTWrite?relay
    302                HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
   \   000027                ; Setup parameters for call to function HalUARTWrite
   \   000027   EE           MOV     A,R6
   \   000028   241F         ADD     A,#0x1f
   \   00002A   F582         MOV     DPL,A
   \   00002C   EF           MOV     A,R7
   \   00002D   3400         ADDC    A,#0x0
   \   00002F   F583         MOV     DPH,A
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FC           MOV     R4,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   FD           MOV     R5,A
   \   000036   EE           MOV     A,R6
   \   000037   2421         ADD     A,#0x21
   \   000039   F582         MOV     DPL,A
   \   00003B   EF           MOV     A,R7
   \   00003C   3400         ADDC    A,#0x0
   \   00003E   F583         MOV     DPH,A
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FA           MOV     R2,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   FB           MOV     R3,A
   \   000045   7900         MOV     R1,#0x0
   \   000047   12....       LCALL   ??HalUARTWrite?relay
    303                HalUARTWrite(0, "\n", 1);         // »Ø³µ»»ÐÐ
   \   00004A                ; Setup parameters for call to function HalUARTWrite
   \   00004A   7C01         MOV     R4,#0x1
   \   00004C   7D00         MOV     R5,#0x0
   \   00004E   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   000050   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   000052   7900         MOV     R1,#0x0
   \   000054   12....       LCALL   ??HalUARTWrite?relay
    304                break;        
    305            }
    306          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   000057                REQUIRE ?Subroutine1
   \   000057                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    307          
    308          /*********************************************************************
    309           * @fn      SampleApp_Send_P2P_Message
    310           *
    311           * @brief   point to point.
    312           *
    313           * @param   none
    314           *
    315           * @return  none
    316           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    317          void SampleApp_Send_P2P_Message( void )
   \                     SampleApp_Send_P2P_Message:
    318          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    319            byte i, temp[3], humidity[3], strTemp[7];
                        ^
Warning[Pe177]: variable "i" was declared but never referenced
    320          
    321            DHT11();             //»ñÈ¡ÎÂÊª¶È
   \   00000A                ; Setup parameters for call to function DHT11
   \   00000A   12....       LCALL   ??DHT11?relay
    322          
    323            //½«ÎÂÊª¶ÈµÄ×ª»»³É×Ö·û´®,¹©LCDÏÔÊ¾  
    324            temp[0] = wendu_shi+0x30;
   \   00000D   90....       MOV     DPTR,#wendu_shi
   \   000010   E0           MOVX    A,@DPTR
   \   000011   2430         ADD     A,#0x30
   \   000013   C0E0         PUSH    A
   \   000015   7403         MOV     A,#0x3
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   D0E0         POP     A
   \   00001C   F0           MOVX    @DPTR,A
    325            temp[1] = wendu_ge+0x30; 
   \   00001D   90....       MOV     DPTR,#wendu_ge
   \   000020   E0           MOVX    A,@DPTR
   \   000021   2430         ADD     A,#0x30
   \   000023   C0E0         PUSH    A
   \   000025   7404         MOV     A,#0x4
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   D0E0         POP     A
   \   00002C   F0           MOVX    @DPTR,A
    326            temp[2] = '\0';
   \   00002D   7405         MOV     A,#0x5
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
    327            humidity[0] = shidu_shi+0x30;
   \   000034   90....       MOV     DPTR,#shidu_shi
   \   000037   E0           MOVX    A,@DPTR
   \   000038   2430         ADD     A,#0x30
   \   00003A   85..82       MOV     DPL,?XSP + 0
   \   00003D   85..83       MOV     DPH,?XSP + 1
   \   000040   F0           MOVX    @DPTR,A
    328            humidity[1] = shidu_ge+0x30;
   \   000041   90....       MOV     DPTR,#shidu_ge
   \   000044   E0           MOVX    A,@DPTR
   \   000045   2430         ADD     A,#0x30
   \   000047   C0E0         PUSH    A
   \   000049   7401         MOV     A,#0x1
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   D0E0         POP     A
   \   000050   F0           MOVX    @DPTR,A
    329            humidity[2] = '\0';
   \   000051   7402         MOV     A,#0x2
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   E4           CLR     A
   \   000057   F0           MOVX    @DPTR,A
    330            //½«Êý¾ÝÕûºÏºó·½±ã·¢¸øÐ­µ÷Æ÷ÏÔÊ¾
    331            osal_memcpy(strTemp, temp, 2); 
   \   000058                ; Setup parameters for call to function osal_memcpy
   \   000058   7403         MOV     A,#0x3
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   A982         MOV     R1,DPL
   \   00005F   AA83         MOV     R2,DPH
   \   000061   89..         MOV     ?V0 + 0,R1
   \   000063   8A..         MOV     ?V0 + 1,R2
   \   000065   75..00       MOV     ?V0 + 2,#0x0
   \   000068   78..         MOV     R0,#?V0 + 0
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006D   7C02         MOV     R4,#0x2
   \   00006F   7D00         MOV     R5,#0x0
   \   000071   7409         MOV     A,#0x9
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000079   12....       LCALL   ?DEALLOC_XSTACK8
    332            osal_memcpy(&strTemp[2], "  ", 2);
   \   00007C                ; Setup parameters for call to function osal_memcpy
   \   00007C   75....       MOV     ?V0 + 0,#`?<Constant "  ">` & 0xff
   \   00007F   75....       MOV     ?V0 + 1,#(`?<Constant "  ">` >> 8) & 0xff
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000087   7C02         MOV     R4,#0x2
   \   000089   7D00         MOV     R5,#0x0
   \   00008B   740B         MOV     A,#0xb
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000093   12....       LCALL   ?DEALLOC_XSTACK8
    333            osal_memcpy(&strTemp[4], humidity, 3);
   \   000096                ; Setup parameters for call to function osal_memcpy
   \   000096   85..82       MOV     DPL,?XSP + 0
   \   000099   85..83       MOV     DPH,?XSP + 1
   \   00009C   A982         MOV     R1,DPL
   \   00009E   AA83         MOV     R2,DPH
   \   0000A0   89..         MOV     ?V0 + 0,R1
   \   0000A2   8A..         MOV     ?V0 + 1,R2
   \   0000A4   78..         MOV     R0,#?V0 + 0
   \   0000A6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A9   7C03         MOV     R4,#0x3
   \   0000AB   7D00         MOV     R5,#0x0
   \   0000AD   740D         MOV     A,#0xd
   \   0000AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B2   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000B5   12....       LCALL   ?DEALLOC_XSTACK8
    334           
    335           
    336            if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
    337                                 SAMPLEAPP_P2P_CLUSTERID,
    338                                 6,
    339                                 strTemp,
    340                                 &SampleApp_TransID,
    341                                 AF_DISCV_ROUTE,
    342                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   0000B8                ; Setup parameters for call to function AF_DataRequest
   \   0000B8   75..1E       MOV     ?V0 + 0,#0x1e
   \   0000BB   78..         MOV     R0,#?V0 + 0
   \   0000BD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C0   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   0000C3   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   0000C6   78..         MOV     R0,#?V0 + 0
   \   0000C8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CB   7409         MOV     A,#0x9
   \   0000CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D0   8582..       MOV     ?V0 + 0,DPL
   \   0000D3   8583..       MOV     ?V0 + 1,DPH
   \   0000D6   78..         MOV     R0,#?V0 + 0
   \   0000D8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DB   75..06       MOV     ?V0 + 0,#0x6
   \   0000DE   75..00       MOV     ?V0 + 1,#0x0
   \   0000E1   78..         MOV     R0,#?V0 + 0
   \   0000E3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E6   75..04       MOV     ?V0 + 0,#0x4
   \   0000E9   78..         MOV     R0,#?V0 + 0
   \   0000EB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EE   7920         MOV     R1,#0x20
   \   0000F0   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0000F2   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0000F4   7A..         MOV     R2,#SampleApp_P2P_DstAddr & 0xff
   \   0000F6   7B..         MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
   \   0000F8   12....       LCALL   ??AF_DataRequest?relay
   \   0000FB   7409         MOV     A,#0x9
   \   0000FD   12....       LCALL   ?DEALLOC_XSTACK8
    343            {
    344            }
    345            else
    346            {
    347              // Error occurred in request to send.
    348            }
    349          }
   \   000100   740D         MOV     A,#0xd
   \   000102   12....       LCALL   ?DEALLOC_XSTACK8
   \   000105   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004                REQUIRE ??Subroutine3_0
   \   000004                ; // Fall through to label ??Subroutine3_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    350          void callback(uint8 port, uint8 event)
   \                     callback:
    351          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
    352            uint8 pBuf[9];
    353            uint16 len;
                          ^
Warning[Pe550]: variable "len" was set but never used
    354            
    355            if ( event != HAL_UART_TX_EMPTY ) 
   \   00000C   7410         MOV     A,#0x10
   \   00000E   6E           XRL     A,R6
   \   00000F   6013         JZ      ??callback_0
    356            {
    357            
    358              // Read from UART
    359              len = HalUARTRead( HAL_UART_PORT_0, pBuf, 1 );
   \   000011                ; Setup parameters for call to function HalUARTRead
   \   000011   7C01         MOV     R4,#0x1
   \   000013   7D00         MOV     R5,#0x0
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   AA82         MOV     R2,DPL
   \   00001D   AB83         MOV     R3,DPH
   \   00001F   7900         MOV     R1,#0x0
   \   000021   12....       LCALL   ??HalUARTRead?relay
    360              
    361             
    362            }  
    363          }
   \                     ??callback_0:
   \   000024   7409         MOV     A,#0x9
   \   000026   12....       LCALL   ?DEALLOC_XSTACK8
   \   000029   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??callback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    callback

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Tem&Hum:">`:
   \   000000   54656D26     DB "Tem&Hum:"
   \            48756D3A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "  ">`:
   \   000000   202000       DB "  "
    364          /*********************************************************************
    365          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0      0
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             0      0     21
       -> HalUARTWrite                  0      0     18
       -> HalUARTWrite                  0      0     18
       -> HalUARTWrite                  0      0     18
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_Send_P2P_Message
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_Send_P2P_Message         1      0     45
       -> DHT11                         0      0     48
       -> osal_memcpy                   0      0     54
       -> osal_memcpy                   0      0     54
       -> osal_memcpy                   0      0     54
       -> AF_DataRequest                0      0     66
     callback                           0      0     18
       -> HalUARTRead                   0      0     36


   Segment part sizes:

     Function/Label                     Bytes
     --------------                     -----
     P0SEL                                 1
     SampleApp_ClusterList                 2
     SampleApp_SimpleDesc                 12
     SampleApp_epDesc                      6
     SampleApp_TaskID                      1
     SampleApp_NwkState                    1
     SampleApp_TransID                     1
     SampleApp_P2P_DstAddr                12
     SampleApp_Periodic_DstAddr           12
     SampleApp_Group                      18
     SampleAppPeriodicCounter              1
     SampleAppFlashCounter                 1
     SampleApp_Init                      162
     ?Subroutine0                          5
     ??Subroutine3_0                       6
     SampleApp_ProcessEvent              152
     SampleApp_HandleKeys                  3
     SampleApp_MessageMSGCB               87
     ?Subroutine1                          5
     SampleApp_Send_P2P_Message          264
     ?Subroutine2                          4
     callback                             44
     ??SampleApp_Init?relay                6
     ??SampleApp_ProcessEvent?relay        6
     ??SampleApp_HandleKeys?relay          6
     ??SampleApp_MessageMSGCB?relay        6
     ??SampleApp_Send_P2P_Message?relay    6
     ??callback?relay                      6
     ?<Constant "Group 1">                 8
     ?<Constant "SampleApp">              10
     ?<Constant "Tem&Hum:">                9
     ?<Constant "\n">                      2
     ?<Constant "  ">                      3

 
 732 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
   1 byte  in segment SFR_AN
  46 bytes in segment XDATA_ROM_C
  53 bytes in segment XDATA_Z
 
 768 bytes of CODE  memory
  46 bytes of CONST memory
   0 bytes of DATA  memory (+ 1 byte shared)
  53 bytes of XDATA memory

Errors: none
Warnings: 2
