###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         30/Mar/2017  20:50:12 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\Source\ #
#                          SampleApp.c                                        #
#    Command line       =  -f C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg          #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\Tools\CC2530DB\f8wConfig.cfg            #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\Source\ #
#                          SampleApp.c -D ZIGBEEPRO -D ZTOOL_P1 -D xMT_TASK   #
#                          -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                 #
#                          LCD_SUPPORTED=DEBUG -lC C:\Users\lucifer\Desktop\– #
#                          ≠“È1.1\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\CoordinatorEB-Pro\List\  #
#                          -lA C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530 #
#                          -2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\CoordinatorEB-Pro\List\ --diag_suppress      #
#                          Pe001,Pa010 -o C:\Users\lucifer\Desktop\–≠“È1.1\ZS #
#                          tack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\CoordinatorEB-Pro\Obj\ -e         #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\ -I C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-C #
#                          C2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\SOURCE\ -I                           #
#                          C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\ZMAIN\TI2530DB\ -I                      #
#                          C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\MT\ -I                 #
#                          C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I        #
#                          C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\   #
#                          -I C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I  #
#                          C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I       #
#                          C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\STACK\AF\ -I           #
#                          C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\STACK\NWK\ -I          #
#                          C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\STACK\SEC\ -I          #
#                          C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I         #
#                          C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\STACK\SYS\ -I          #
#                          C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I          #
#                          C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I           #
#                          C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\ZMAC\ -I               #
#                          C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I     #
#                          C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I     #
#                          C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I        #
#                          C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I     #
#                          C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\   #
#                          -I C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530- #
#                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04 #
#                          \SINGLE_CHIP\ -Ohz --require_prototypes            #
#    List file          =  C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\CoordinatorEB-Pro\List\SampleApp.lst             #
#    Object file        =  C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530-2.3 #
#                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\CoordinatorEB-Pro\Obj\SampleApp.r51              #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\lucifer\Desktop\–≠“È1.1\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          
      2          
      3          /*********************************************************************
      4           * INCLUDES
      5           */
      6          #include "OSAL.h"
      7          #include "ZGlobals.h"
      8          #include "AF.h"
      9          #include "aps_groups.h"
     10          #include "ZDApp.h"
     11          
     12          #include "SampleApp.h"
     13          #include "SampleAppHw.h"
     14          
     15          #include "OnBoard.h"
     16          
     17          /* HAL */
     18          #include "hal_lcd.h"
     19          #include "hal_led.h"
     20          #include "hal_key.h"
     21          #include "MT_UART.h"
     22          #include "MT_APP.h"
     23          #include "MT.h"
     24          #include<string.h>
     25          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     26          uint8 T_VALUE = 32; //Œ¬∂»…œœﬁ £¨◊‘–––ﬁ∏ƒ
   \                     T_VALUE:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for T_VALUE>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     27          uint8 H_VALUE = 55; // ™∂»…œœﬁ £¨◊‘–––ﬁ∏ƒ
   \                     H_VALUE:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for H_VALUE>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     28          uint8 C_VALUE = 3; //—ÃŒÌ≈®∂»±®æØ £¨◊‘–––ﬁ∏ƒ ÷ªƒ‹∏ƒŒ™ 1/2/3∆‰÷–“ª∏ˆ
   \                     C_VALUE:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for C_VALUE>`
   \   000001                REQUIRE __INIT_XDATA_I
     29          /*********************************************************************
     30           * GLOBAL VARIABLES
     31           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     32          uint8 count=0;
   \                     count:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     33          uint8 TEM,HUM,CO2,ADDR;
   \                     TEM:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     HUM:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     CO2:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ADDR:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
     34          uint8 A_CMD1[]="EAE10000";
   \                     A_CMD1:
   \   000000                DS 9
   \   000009                REQUIRE `?<Initializer for A_CMD1>`
   \   000009                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     35          uint8 A_CMD2[]="EAE20000";
   \                     A_CMD2:
   \   000000                DS 9
   \   000009                REQUIRE `?<Initializer for A_CMD2>`
   \   000009                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     36          uint8 A_CMD3[]="EAE30000";
   \                     A_CMD3:
   \   000000                DS 9
   \   000009                REQUIRE `?<Initializer for A_CMD3>`
   \   000009                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     37          uint8 B_CMD1[]="EBE40000";
   \                     B_CMD1:
   \   000000                DS 9
   \   000009                REQUIRE `?<Initializer for B_CMD1>`
   \   000009                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     38          uint8 B_CMD2[]="EBE50000";
   \                     B_CMD2:
   \   000000                DS 9
   \   000009                REQUIRE `?<Initializer for B_CMD2>`
   \   000009                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     39          uint8 B_CMD3[]="EBE60000";
   \                     B_CMD3:
   \   000000                DS 9
   \   000009                REQUIRE `?<Initializer for B_CMD3>`
   \   000009                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     40          uint8 C_CMD1[]="ECE10000";
   \                     C_CMD1:
   \   000000                DS 9
   \   000009                REQUIRE `?<Initializer for C_CMD1>`
   \   000009                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     41          uint8 C_CMD2[]="ECE20000";
   \                     C_CMD2:
   \   000000                DS 9
   \   000009                REQUIRE `?<Initializer for C_CMD2>`
   \   000009                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     42          uint8 C_CMD3[]="ECE30000";
   \                     C_CMD3:
   \   000000                DS 9
   \   000009                REQUIRE `?<Initializer for C_CMD3>`
   \   000009                REQUIRE __INIT_XDATA_I
     43          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     44          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     45          {
     46           SAMPLEAPP_PERIODIC_CLUSTERID1,
     47           SAMPLEAPP_PERIODIC_CLUSTERID2,
     48          
     49          };
     50          

   \                                 In  segment XDATA_ROM_C, align 1
     51          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
     52          {
     53            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
     54            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
     55            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
     56            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
     57            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
     58            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     59            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
     60            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     61            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
     62          };
     63          
     64          // This is the Endpoint/Interface description.  It is defined here, but
     65          // filled-in in SampleApp_Init().  Another way to go would be to fill
     66          // in the structure here and make it a "const" (in code space).  The
     67          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     68          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
     69          
     70          /*********************************************************************
     71           * EXTERNAL VARIABLES
     72           */
     73          
     74          /*********************************************************************
     75           * EXTERNAL FUNCTIONS
     76           */
     77          
     78          /*********************************************************************
     79           * LOCAL VARIABLES
     80           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     81          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     82                                    // This variable will be received when
     83                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     84          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     85          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     86          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     87          
     88          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     89          afAddrType_t SampleApp_P2P_DstAddr;      //µ„≤•
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     90          afAddrType_t SampleApp_Periodic_DstAddr;      //π„≤•
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     91          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
     92          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     93          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     94          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     95          
     96          /*********************************************************************
     97           * LOCAL FUNCTIONS
     98           */
     99          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    100          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    101          void SampleApp_Send_P2P_Message(void);
    102          void callback(uint8 port,uint8 event);
    103          void Delay_MS(uint8 x);
    104          //ms—” ±∫Ø ˝

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    105          void Delay_MS(uint8 x)
   \                     Delay_MS:
    106          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
    107            uint8 i;
    108            for(i=0;i<x;i++)
   \   000007   7E00         MOV     R6,#0x0
   \   000009   8008         SJMP    ??Delay_MS_0
    109            MicroWait(1000);
   \                     ??Delay_MS_1:
   \   00000B                ; Setup parameters for call to function Onboard_wait
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??Onboard_wait?relay
   \   000012   0E           INC     R6
   \                     ??Delay_MS_0:
   \   000013   EE           MOV     A,R6
   \   000014   C3           CLR     C
   \   000015   9F           SUBB    A,R7
   \   000016   40F3         JC      ??Delay_MS_1
    110          }
   \   000018                REQUIRE ?Subroutine0
   \   000018                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    111          /*********************************************************************
    112           * NETWORK LAYER CALLBACKS
    113           */
    114          
    115          /*********************************************************************
    116           * PUBLIC FUNCTIONS
    117           */
    118          
    119          /*********************************************************************
    120           * @fn      SampleApp_Init
    121           *
    122           * @brief   Initialization function for the Generic App Task.
    123           *          This is called during initialization and should contain
    124           *          any application specific initialization (ie. hardware
    125           *          initialization/setup, table initialization, power up
    126           *          notificaiton ... ).
    127           *
    128           * @param   task_id - the ID assigned by OSAL.  This ID should be
    129           *                    used to send messages and set timers.
    130           *
    131           * @return  none
    132           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    133          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    134          { 
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    135            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    136            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    137            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    138            
    139            MT_UartInit();                  //¥Æø⁄≥ı ºªØ
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    140            MT_UartRegisterTaskID(task_id); //◊¢≤·¥Æø⁄»ŒŒÒ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    141            
    142            
    143           #if defined ( BUILD_ALL_DEVICES )
    144            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    145            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    146            // together - if they are - we will start up a coordinator. Otherwise,
    147            // the device will start as a router.
    148            if ( readCoordinatorJumper() )
    149              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    150            else
    151              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    152          #endif // BUILD_ALL_DEVICES
    153          
    154          #if defined ( HOLD_AUTO_START )
    155            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    156            //  from starting the device and wait for the application to
    157            //  start the device.
    158            ZDOInitDevice(0);
    159          #endif
    160            
    161            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µ„≤• 
   \   00001E   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   000021   7402         MOV     A,#0x2
   \   000023   F0           MOVX    @DPTR,A
    162            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
   \   000024   A3           INC     DPTR
   \   000025   7414         MOV     A,#0x14
   \   000027   F0           MOVX    @DPTR,A
    163            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //¡Ω÷’∂À“‘¥Àµÿ÷∑Ω´≤‚¡ø÷µ∑¢ÀÕµΩ–≠µ˜∆˜
   \   000028   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   00002B   E4           CLR     A
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
   \   00002E   F0           MOVX    @DPTR,A
    164            
    165            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//π„≤•
   \   00002F   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000032   740F         MOV     A,#0xf
   \   000034   F0           MOVX    @DPTR,A
    166            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000035   A3           INC     DPTR
   \   000036   7414         MOV     A,#0x14
   \   000038   F0           MOVX    @DPTR,A
    167            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;       //∑¢∏¯÷’∂À£¨¥ÀœÓƒø–≠µ˜∆˜≤ªœÚ÷’∂À∑¢ÀÕ ˝æ›£¨À˘“‘≤ª”√°£
   \   000039   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00003C   74FF         MOV     A,#-0x1
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   F0           MOVX    @DPTR,A
    168          
    169            //◊∞‘ÿ√Ë ˆ∑˚–≈œ¢£¨ƒ¨»œ°£
    170            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000041   90....       MOV     DPTR,#SampleApp_epDesc
   \   000044   7414         MOV     A,#0x14
   \   000046   F0           MOVX    @DPTR,A
    171            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000047   A3           INC     DPTR
   \   000048   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   00004E   F0           MOVX    @DPTR,A
    172            SampleApp_epDesc.simpleDesc
    173                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00004F   A3           INC     DPTR
   \   000050   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000056   F0           MOVX    @DPTR,A
    174            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000057   A3           INC     DPTR
   \   000058   E4           CLR     A
   \   000059   F0           MOVX    @DPTR,A
    175          
    176            // ◊¢≤·∂Àµ„√Ë ˆ∑˚
    177            afRegister( &SampleApp_epDesc );
   \   00005A                ; Setup parameters for call to function afRegister
   \   00005A   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00005C   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00005E   12....       LCALL   ??afRegister?relay
    178          
    179            // Register for all key events - This app will handle all key events
    180            RegisterForKeys( SampleApp_TaskID );
   \   000061                ; Setup parameters for call to function RegisterForKeys
   \   000061   90....       MOV     DPTR,#SampleApp_TaskID
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F9           MOV     R1,A
   \   000066   12....       LCALL   ??RegisterForKeys?relay
    181          
    182           
    183          #if defined ( LCD_SUPPORTED )
    184            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   000069                ; Setup parameters for call to function HalLcdWriteString
   \   000069   7901         MOV     R1,#0x1
   \   00006B   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   00006D   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   00006F   12....       LCALL   ??HalLcdWriteString?relay
    185          #endif
    186          }
   \   000072   80..         SJMP    ?Subroutine0
    187          
    188          /*********************************************************************
    189           * @fn      ”¶”√≤„»ŒŒÒ¬÷—Ø∫Ø ˝£¨À˘”–»ŒŒÒ∂º‘⁄’‚¿ÔÀ≥–Ú÷¥––
    190           *
    191           * @brief   Generic Application Task event processor.  This function
    192           *          is called to process all events for the task.  Events
    193           *          include timers, messages and any other user defined events.
    194           *
    195           * @param   task_id  - The OSAL assigned task ID.
    196           * @param   events - events to process.  This is a bit map and can
    197           *                   contain more than one event.
    198           *
    199           * @return  none
    200           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    201          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    202          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    203            afIncomingMSGPacket_t *MSGpkt;
    204            (void)task_id;  // Intentionally unreferenced parameter
    205          
    206            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6057         JZ      ??SampleApp_ProcessEvent_0
    207            {
    208              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8021         SJMP    ??SampleApp_ProcessEvent_1
    209              while ( MSGpkt )
    210              {
    211                switch ( MSGpkt->hdr.event )
    212                {
    213                  // ∞¥º¸»ŒŒÒ£¨Œ¥ π”√
    214                  case KEY_CHANGE:
    215                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    216                    break;
    217          
    218                  //Ω” ’µΩŒﬁœﬂœ˚œ¢£¨µ˜”√œ˚œ¢Ω‚Œˆ∫Ø ˝
    219                  case AF_INCOMING_MSG_CMD: 
    220                    SampleApp_MessageMSGCB( MSGpkt );
    221                    break;
    222          
    223                  // ”≤º˛≥ı ºªØ
    224                  case ZDO_STATE_CHANGE:
    225                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    226                    if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
    227                        
    228                         //÷ª”–Œ¬∂»÷’∂À∆Ù∂Ø1.1s∂® ±—≠ª∑∑¢ÀÕŒ¬ ™∂»
    229                         (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6406         XRL     A,#0x6
   \   000017   7010         JNZ     ??SampleApp_ProcessEvent_3
    230                    {
    231                      //∂® ±∆Ù∂Ø»ŒŒÒ
    232                      osal_start_timerEx( SampleApp_TaskID,
    233                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    234                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \   000019                ; Setup parameters for call to function osal_start_timerEx
   \   000019   7CD0         MOV     R4,#-0x30
   \   00001B   7D07         MOV     R5,#0x7
   \   00001D   7A01         MOV     R2,#0x1
   \   00001F   7B00         MOV     R3,#0x0
   \   000021   90....       MOV     DPTR,#SampleApp_TaskID
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
   \   000026   12....       LCALL   ??osal_start_timerEx?relay
    235                    }
    236                    else
    237                    {
    238                      // Device is no longer in the network
    239                    }
    240                    break;
    241          
    242                  default:
    243                    break;
    244                }
    245          
    246                // Release the memory
    247                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_3:
   \   000029                ; Setup parameters for call to function osal_msg_deallocate
   \   000029   AA..         MOV     R2,?V0 + 0
   \   00002B   AB..         MOV     R3,?V0 + 1
   \   00002D   12....       LCALL   ??osal_msg_deallocate?relay
    248          
    249                // Next - if one is available
    250                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000030                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000030   90....       MOV     DPTR,#SampleApp_TaskID
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F9           MOV     R1,A
   \   000035   12....       LCALL   ??osal_msg_receive?relay
   \   000038   8A..         MOV     ?V0 + 0,R2
   \   00003A   8B..         MOV     ?V0 + 1,R3
   \   00003C   E5..         MOV     A,?V0 + 0
   \   00003E   45..         ORL     A,?V0 + 1
   \   000040   601A         JZ      ??SampleApp_ProcessEvent_4
   \   000042   85..82       MOV     DPL,?V0 + 0
   \   000045   85..83       MOV     DPH,?V0 + 1
   \   000048   E0           MOVX    A,@DPTR
   \   000049   24E6         ADD     A,#-0x1a
   \   00004B   6006         JZ      ??SampleApp_ProcessEvent_5
   \   00004D   2449         ADD     A,#0x49
   \   00004F   60BE         JZ      ??SampleApp_ProcessEvent_2
   \   000051   80D6         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_5:
   \   000053                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000053   AA..         MOV     R2,?V0 + 0
   \   000055   AB..         MOV     R3,?V0 + 1
   \   000057   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00005A   80CD         SJMP    ??SampleApp_ProcessEvent_3
    251              }
    252          
    253              // return unprocessed events
    254              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_4:
   \   00005C   EE           MOV     A,R6
   \   00005D   FA           MOV     R2,A
   \   00005E   EF           MOV     A,R7
   \   00005F   6480         XRL     A,#0x80
   \   000061   FB           MOV     R3,A
   \   000062   800E         SJMP    ??SampleApp_ProcessEvent_6
    255            }
    256          
    257            // Send a message out - This event is generated by a timer
    258            //  (setup in SampleApp_Init()).
    259            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000064   EE           MOV     A,R6
   \   000065   A2E0         MOV     C,0xE0 /* A   */.0
   \   000067   5005         JNC     ??SampleApp_ProcessEvent_7
    260            {
    261          
    262              // return unprocessed events
    263              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   000069   6401         XRL     A,#0x1
   \   00006B   FA           MOV     R2,A
   \   00006C   8004         SJMP    ??SampleApp_ProcessEvent_6
    264            }
    265          
    266            // Discard unknown events
    267            return 0;
   \                     ??SampleApp_ProcessEvent_7:
   \   00006E   7A00         MOV     R2,#0x0
   \   000070   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_6:
   \   000072   7F04         MOV     R7,#0x4
   \   000074   02....       LJMP    ?BANKED_LEAVE_XDATA
    268          }
    269          
    270          /*********************************************************************
    271           * Event Generation Functions
    272           */
    273          /*********************************************************************
    274           * @fn      SampleApp_HandleKeys
    275           *
    276           * @brief   Handles all key events for this device.
    277           *
    278           * @param   shift - true if in shift/alt.
    279           * @param   keys - bit field for key events. Valid entries:
    280           *                 HAL_KEY_SW_2
    281           *                 HAL_KEY_SW_1
    282           *
    283           * @return  none
    284           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    285          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    286          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    287           //Œ¥ π”√£¨≤ªµ√…æ≥˝ 
    288          }
   \   000000   02....       LJMP    ?BRET
    289          
    290          /*********************************************************************
    291           * LOCAL FUNCTIONS
    292           */
    293          
    294          /*********************************************************************
    295           * @fn      SampleApp_MessageMSGCB
    296           *
    297           * @brief   Data message processor callback.  This function processes
    298           *          any incoming data - probably from other devices.  So, based
    299           *          on cluster ID, perform the intended action.
    300           *
    301           * @param   none
    302           *
    303           * @return  none
    304           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    305          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    306          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    307            
    308            switch ( pkt->clusterId )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6401         XRL     A,#0x1
   \   000010   7002         JNZ     ??SampleApp_MessageMSGCB_0
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   000014   6003         JZ      $+5
   \   000016   02....       LJMP    ??SampleApp_MessageMSGCB_1 & 0xFFFF
    309            {
    310              case SAMPLEAPP_PERIODIC_CLUSTERID1://Ω” ’µΩ÷’∂Àœ˚œ¢£¨¥Æø⁄∑¢ÀÕ÷¡PC   
    311                  {
    312                   
    313                   if(pkt->cmd.Data[0]==1)//A∫≈÷’∂À
   \   000019   EA           MOV     A,R2
   \   00001A   2421         ADD     A,#0x21
   \   00001C   FE           MOV     R6,A
   \   00001D   EB           MOV     A,R3
   \   00001E   3400         ADDC    A,#0x0
   \   000020   FF           MOV     R7,A
   \   000021   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000024   6401         XRL     A,#0x1
   \   000026   6003         JZ      $+5
   \   000028   02....       LJMP    ??SampleApp_MessageMSGCB_2 & 0xFFFF
    314                    {
    315                     TEM = pkt->cmd.Data[1]*10+pkt->cmd.Data[2];
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   C082         PUSH    DPL
   \   00002F   C083         PUSH    DPH
   \   000031   75F00A       MOV     B,#0xa
   \   000034   8882         MOV     DPL,R0
   \   000036   8983         MOV     DPH,R1
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   A4           MUL     AB
   \   00003B   D083         POP     DPH
   \   00003D   D082         POP     DPL
   \   00003F   12....       LCALL   ?Subroutine6 & 0xFFFF
    316                     HUM = pkt->cmd.Data[3]*10+pkt->cmd.Data[4];
   \                     ??CrossCallReturnLabel_8:
   \   000042   C082         PUSH    DPL
   \   000044   C083         PUSH    DPH
   \   000046   75F00A       MOV     B,#0xa
   \   000049   8882         MOV     DPL,R0
   \   00004B   8983         MOV     DPH,R1
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   A4           MUL     AB
   \   000052   D083         POP     DPH
   \   000054   D082         POP     DPL
   \   000056   12....       LCALL   ?Subroutine2 & 0xFFFF
    317                     CO2 = pkt->cmd.Data[5];
    318                     if(TEM>T_VALUE||HUM>H_VALUE||CO2==C_VALUE) B_CMD2[7] = '1';
   \                     ??CrossCallReturnLabel_0:
   \   000059   4011         JC      ??SampleApp_MessageMSGCB_3
   \   00005B   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00005E   400C         JC      ??SampleApp_MessageMSGCB_3
   \   000060   90....       MOV     DPTR,#CO2
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F8           MOV     R0,A
   \   000065   90....       MOV     DPTR,#C_VALUE
   \   000068   E0           MOVX    A,@DPTR
   \   000069   68           XRL     A,R0
   \   00006A   7007         JNZ     ??SampleApp_MessageMSGCB_4
   \                     ??SampleApp_MessageMSGCB_3:
   \   00006C   90....       MOV     DPTR,#B_CMD2 + 7
   \   00006F   7431         MOV     A,#0x31
   \   000071   8005         SJMP    ??SampleApp_MessageMSGCB_5
    319                     else B_CMD2[7] = '0';             
   \                     ??SampleApp_MessageMSGCB_4:
   \   000073   90....       MOV     DPTR,#B_CMD2 + 7
   \   000076   7430         MOV     A,#0x30
   \                     ??SampleApp_MessageMSGCB_5:
   \   000078   F0           MOVX    @DPTR,A
    320                     AF_DataRequest(   &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    321                                 SAMPLEAPP_PERIODIC_CLUSTERID1,
    322                                 8,
    323                                 B_CMD2,
    324                                 &SampleApp_TransID,
    325                                 AF_DISCV_ROUTE,
    326                                 AF_DEFAULT_RADIUS );
   \   000079                ; Setup parameters for call to function AF_DataRequest
   \   000079   75..1E       MOV     ?V0 + 0,#0x1e
   \   00007C   78..         MOV     R0,#?V0 + 0
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000081   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000084   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000087   78..         MOV     R0,#?V0 + 0
   \   000089   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008C   75....       MOV     ?V0 + 0,#B_CMD2 & 0xff
   \   00008F   75....       MOV     ?V0 + 1,#(B_CMD2 >> 8) & 0xff
   \   000092   78..         MOV     R0,#?V0 + 0
   \   000094   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000097   75..08       MOV     ?V0 + 0,#0x8
   \   00009A   75..00       MOV     ?V0 + 1,#0x0
   \   00009D   78..         MOV     R0,#?V0 + 0
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A2   75..01       MOV     ?V0 + 0,#0x1
   \   0000A5   78..         MOV     R0,#?V0 + 0
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AA   7920         MOV     R1,#0x20
   \   0000AC   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0000AE   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0000B0   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   0000B2   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   0000B4   12....       LCALL   ??AF_DataRequest?relay
   \   0000B7   7409         MOV     A,#0x9
   \   0000B9   12....       LCALL   ?DEALLOC_XSTACK8
    327                     A_CMD1[6] = pkt->cmd.Data[1]+0X30;
   \   0000BC   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000BF   90....       MOV     DPTR,#A_CMD1 + 6
   \   0000C2   12....       LCALL   ?Subroutine7 & 0xFFFF
    328                     A_CMD1[7] = pkt->cmd.Data[2]+0X30;
   \                     ??CrossCallReturnLabel_10:
   \   0000C5   90....       MOV     DPTR,#A_CMD1 + 7
   \   0000C8   12....       LCALL   ?Subroutine5 & 0xFFFF
    329                     A_CMD2[6] = pkt->cmd.Data[3]+0X30;
   \                     ??CrossCallReturnLabel_6:
   \   0000CB   90....       MOV     DPTR,#A_CMD2 + 6
   \   0000CE   12....       LCALL   ?Subroutine4 & 0xFFFF
    330                     A_CMD2[7] = pkt->cmd.Data[4]+0X30;
   \                     ??CrossCallReturnLabel_4:
   \   0000D1   90....       MOV     DPTR,#A_CMD2 + 7
   \   0000D4   12....       LCALL   ?Subroutine3 & 0xFFFF
    331                     A_CMD3[7] = pkt->cmd.Data[5]+0X30;
   \                     ??CrossCallReturnLabel_2:
   \   0000D7   90....       MOV     DPTR,#A_CMD3 + 7
   \   0000DA   F0           MOVX    @DPTR,A
    332                     HalUARTWrite(0, A_CMD1, 8); // ‰≥ˆΩ” ’µΩµƒ ˝æ›
   \   0000DB                ; Setup parameters for call to function HalUARTWrite
   \   0000DB   7C08         MOV     R4,#0x8
   \   0000DD   7D00         MOV     R5,#0x0
   \   0000DF   7A..         MOV     R2,#A_CMD1 & 0xff
   \   0000E1   7B..         MOV     R3,#(A_CMD1 >> 8) & 0xff
   \   0000E3   7900         MOV     R1,#0x0
   \   0000E5   12....       LCALL   ??HalUARTWrite?relay
    333            //         Delay_MS(60);//—” ±60ms  —” ± ±º‰ ◊‘–––ﬁ∏ƒ
    334                     HalUARTWrite(0, A_CMD2, 8); // ‰≥ˆΩ” ’µΩµƒ ˝æ›
   \   0000E8                ; Setup parameters for call to function HalUARTWrite
   \   0000E8   7C08         MOV     R4,#0x8
   \   0000EA   7D00         MOV     R5,#0x0
   \   0000EC   7A..         MOV     R2,#A_CMD2 & 0xff
   \   0000EE   7B..         MOV     R3,#(A_CMD2 >> 8) & 0xff
   \   0000F0   7900         MOV     R1,#0x0
   \   0000F2   12....       LCALL   ??HalUARTWrite?relay
    335             //        Delay_MS(60);//—” ±60ms  —” ± ±º‰ ◊‘–––ﬁ∏ƒ
    336                     HalUARTWrite(0, A_CMD3, 8); // ‰≥ˆΩ” ’µΩµƒ ˝æ›
   \   0000F5                ; Setup parameters for call to function HalUARTWrite
   \   0000F5   7C08         MOV     R4,#0x8
   \   0000F7   7D00         MOV     R5,#0x0
   \   0000F9   7A..         MOV     R2,#A_CMD3 & 0xff
   \   0000FB   7B..         MOV     R3,#(A_CMD3 >> 8) & 0xff
   \   0000FD   7900         MOV     R1,#0x0
   \   0000FF   12....       LCALL   ??HalUARTWrite?relay
    337                    }
    338                   if(pkt->cmd.Data[0]==2)//C∫≈÷’∂À
   \                     ??SampleApp_MessageMSGCB_2:
   \   000102   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000105   6402         XRL     A,#0x2
   \   000107   6003         JZ      $+5
   \   000109   02....       LJMP    ??SampleApp_MessageMSGCB_1 & 0xFFFF
    339                    {
    340                     TEM = pkt->cmd.Data[1]*10+pkt->cmd.Data[2];
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   C082         PUSH    DPL
   \   000110   C083         PUSH    DPH
   \   000112   75F00A       MOV     B,#0xa
   \   000115   8882         MOV     DPL,R0
   \   000117   8983         MOV     DPH,R1
   \   000119   A3           INC     DPTR
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   A4           MUL     AB
   \   00011C   D083         POP     DPH
   \   00011E   D082         POP     DPL
   \   000120   12....       LCALL   ?Subroutine6 & 0xFFFF
    341                     HUM = pkt->cmd.Data[3]*10+pkt->cmd.Data[4];
   \                     ??CrossCallReturnLabel_9:
   \   000123   C082         PUSH    DPL
   \   000125   C083         PUSH    DPH
   \   000127   75F00A       MOV     B,#0xa
   \   00012A   8882         MOV     DPL,R0
   \   00012C   8983         MOV     DPH,R1
   \   00012E   A3           INC     DPTR
   \   00012F   A3           INC     DPTR
   \   000130   A3           INC     DPTR
   \   000131   E0           MOVX    A,@DPTR
   \   000132   A4           MUL     AB
   \   000133   D083         POP     DPH
   \   000135   D082         POP     DPL
   \   000137   12....       LCALL   ?Subroutine2 & 0xFFFF
    342                     CO2 = pkt->cmd.Data[5];
    343                     if(TEM>T_VALUE||HUM>H_VALUE||CO2==C_VALUE) B_CMD2[7] = '1';
   \                     ??CrossCallReturnLabel_1:
   \   00013A   4011         JC      ??SampleApp_MessageMSGCB_6
   \   00013C   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00013F   400C         JC      ??SampleApp_MessageMSGCB_6
   \   000141   90....       MOV     DPTR,#CO2
   \   000144   E0           MOVX    A,@DPTR
   \   000145   F8           MOV     R0,A
   \   000146   90....       MOV     DPTR,#C_VALUE
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   68           XRL     A,R0
   \   00014B   7007         JNZ     ??SampleApp_MessageMSGCB_7
   \                     ??SampleApp_MessageMSGCB_6:
   \   00014D   90....       MOV     DPTR,#B_CMD2 + 7
   \   000150   7431         MOV     A,#0x31
   \   000152   8005         SJMP    ??SampleApp_MessageMSGCB_8
    344                     else B_CMD2[7] = '0';             
   \                     ??SampleApp_MessageMSGCB_7:
   \   000154   90....       MOV     DPTR,#B_CMD2 + 7
   \   000157   7430         MOV     A,#0x30
   \                     ??SampleApp_MessageMSGCB_8:
   \   000159   F0           MOVX    @DPTR,A
    345                     AF_DataRequest(   &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    346                                 SAMPLEAPP_PERIODIC_CLUSTERID1,
    347                                 8,
    348                                 B_CMD2,
    349                                 &SampleApp_TransID,
    350                                 AF_DISCV_ROUTE,
    351                                 AF_DEFAULT_RADIUS );
   \   00015A                ; Setup parameters for call to function AF_DataRequest
   \   00015A   75..1E       MOV     ?V0 + 0,#0x1e
   \   00015D   78..         MOV     R0,#?V0 + 0
   \   00015F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000162   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000165   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000168   78..         MOV     R0,#?V0 + 0
   \   00016A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016D   75....       MOV     ?V0 + 0,#B_CMD2 & 0xff
   \   000170   75....       MOV     ?V0 + 1,#(B_CMD2 >> 8) & 0xff
   \   000173   78..         MOV     R0,#?V0 + 0
   \   000175   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000178   75..08       MOV     ?V0 + 0,#0x8
   \   00017B   75..00       MOV     ?V0 + 1,#0x0
   \   00017E   78..         MOV     R0,#?V0 + 0
   \   000180   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000183   75..01       MOV     ?V0 + 0,#0x1
   \   000186   78..         MOV     R0,#?V0 + 0
   \   000188   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00018B   7920         MOV     R1,#0x20
   \   00018D   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00018F   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000191   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000193   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000195   12....       LCALL   ??AF_DataRequest?relay
   \   000198   7409         MOV     A,#0x9
   \   00019A   12....       LCALL   ?DEALLOC_XSTACK8
    352                     C_CMD1[6] = pkt->cmd.Data[1]+0X30;
   \   00019D   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0001A0   90....       MOV     DPTR,#C_CMD1 + 6
   \   0001A3   12....       LCALL   ?Subroutine7 & 0xFFFF
    353                     C_CMD1[7] = pkt->cmd.Data[2]+0X30;
   \                     ??CrossCallReturnLabel_11:
   \   0001A6   90....       MOV     DPTR,#C_CMD1 + 7
   \   0001A9   12....       LCALL   ?Subroutine5 & 0xFFFF
    354                     C_CMD2[6] = pkt->cmd.Data[3]+0X30;
   \                     ??CrossCallReturnLabel_7:
   \   0001AC   90....       MOV     DPTR,#C_CMD2 + 6
   \   0001AF   12....       LCALL   ?Subroutine4 & 0xFFFF
    355                     C_CMD2[7] = pkt->cmd.Data[4]+0X30;
   \                     ??CrossCallReturnLabel_5:
   \   0001B2   90....       MOV     DPTR,#C_CMD2 + 7
   \   0001B5   12....       LCALL   ?Subroutine3 & 0xFFFF
    356                     C_CMD3[7] = pkt->cmd.Data[5]+0X30;
   \                     ??CrossCallReturnLabel_3:
   \   0001B8   90....       MOV     DPTR,#C_CMD3 + 7
   \   0001BB   F0           MOVX    @DPTR,A
    357                     HalUARTWrite(0, C_CMD1, 8); // ‰≥ˆΩ” ’µΩµƒ ˝æ›Œ¬∂»
   \   0001BC                ; Setup parameters for call to function HalUARTWrite
   \   0001BC   7C08         MOV     R4,#0x8
   \   0001BE   7D00         MOV     R5,#0x0
   \   0001C0   7A..         MOV     R2,#C_CMD1 & 0xff
   \   0001C2   7B..         MOV     R3,#(C_CMD1 >> 8) & 0xff
   \   0001C4   12....       LCALL   ?Subroutine11 & 0xFFFF
    358                     Delay_MS(60);//—” ±60ms  —” ± ±º‰ ◊‘–––ﬁ∏ƒ
    359                     HalUARTWrite(0, C_CMD2, 8); // ‰≥ˆΩ” ’µΩµƒ ˝æ› ™∂»
    360                     Delay_MS(60);//—” ±60ms  —” ± ±º‰ ◊‘–––ﬁ∏ƒ
    361                     HalUARTWrite(0, C_CMD3, 8); // ‰≥ˆΩ” ’µΩµƒ ˝æ›—ÃŒÌ
    362                    }
    363                  }    
    364            }  
   \                     ??CrossCallReturnLabel_18:
   \   0001C7   7A..         MOV     R2,#C_CMD2 & 0xff
   \   0001C9   7B..         MOV     R3,#(C_CMD2 >> 8) & 0xff
   \   0001CB   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0001CE   7A..         MOV     R2,#C_CMD3 & 0xff
   \   0001D0   7B..         MOV     R3,#(C_CMD3 >> 8) & 0xff
   \   0001D2   7900         MOV     R1,#0x0
   \   0001D4   12....       LCALL   ??HalUARTWrite?relay
    365          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   0001D7                REQUIRE ?Subroutine1
   \   0001D7                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function Delay_MS
   \   000005                ; Setup parameters for call to function Delay_MS
   \   000005   793C         MOV     R1,#0x3c
   \   000007   12....       LCALL   ??Delay_MS?relay
   \   00000A                ; Setup parameters for call to function HalUARTWrite
   \   00000A                ; Setup parameters for call to function HalUARTWrite
   \   00000A   7C08         MOV     R4,#0x8
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV     DPTR,#HUM
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   90....       MOV     DPTR,#H_VALUE
   \   000008   E0           MOVX    A,@DPTR
   \   000009   C3           CLR     C
   \   00000A   98           SUBB    A,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F583         MOV     DPH,A
   \   00000A   8882         MOV     DPL,R0
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   2430         ADD     A,#0x30
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000003   F583         MOV     DPH,A
   \   000005   8882         MOV     DPL,R0
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   2430         ADD     A,#0x30
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F8           MOV     R0,A
   \   000001   E0           MOVX    A,@DPTR
   \   000002   28           ADD     A,R0
   \   000003   90....       MOV     DPTR,#TEM
   \   000006   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000009   F9           MOV     R1,A
   \   00000A   8882         MOV     DPL,R0
   \   00000C   8983         MOV     DPH,R1
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F8           MOV     R0,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2430         ADD     A,#0x30
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   2430         ADD     A,#0x30
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000003   F583         MOV     DPH,A
   \   000005   8882         MOV     DPL,R0
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000003   2430         ADD     A,#0x30
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F8           MOV     R0,A
   \   000001   E0           MOVX    A,@DPTR
   \   000002   28           ADD     A,R0
   \   000003   90....       MOV     DPTR,#HUM
   \   000006   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000009   90....       MOV     DPTR,#CO2
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   90....       MOV     DPTR,#TEM
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F8           MOV     R0,A
   \   000012   90....       MOV     DPTR,#T_VALUE
   \   000015   E0           MOVX    A,@DPTR
   \   000016   C3           CLR     C
   \   000017   98           SUBB    A,R0
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET
    366          
    367          /*********************************************************************
    368           * @fn      SampleApp_Send_P2P_Message
    369           *
    370           * @brief   point to point.
    371           *
    372           * @param   none
    373           *
    374           * @return  none
    375           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    376          void SampleApp_Send_P2P_Message( void )                                      
   \                     SampleApp_Send_P2P_Message:
    377          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    378          }
   \   000000   02....       LJMP    ?BRET
    379          
    380          /*********************************************************************
    381          *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    382          void callback(uint8 port, uint8 event)
   \                     callback:
    383          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
    384            byte cmd[9];
    385            uint8 count;
                         ^
Warning[Pe177]: variable "count" was declared but never referenced
    386            (void)port;
    387            if (event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT))
   \   00000C   7407         MOV     A,#0x7
   \   00000E   5E           ANL     A,R6
   \   00000F   605B         JZ      ??callback_0
    388            {
    389             HalUARTRead(0, cmd, 8);//¥”¥Æø⁄∂¡»°÷∏¡Ó
   \   000011                ; Setup parameters for call to function HalUARTRead
   \   000011   7C08         MOV     R4,#0x8
   \   000013   7D00         MOV     R5,#0x0
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   AA82         MOV     R2,DPL
   \   00001D   AB83         MOV     R3,DPH
   \   00001F   7900         MOV     R1,#0x0
   \   000021   12....       LCALL   ??HalUARTRead?relay
    390             AF_DataRequest(   &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    391                                 SAMPLEAPP_PERIODIC_CLUSTERID1,
    392                                 8,
    393                                 cmd,
    394                                 &SampleApp_TransID,
    395                                 AF_DISCV_ROUTE,
    396                                 AF_DEFAULT_RADIUS );    
   \   000024                ; Setup parameters for call to function AF_DataRequest
   \   000024   75..1E       MOV     ?V0 + 0,#0x1e
   \   000027   78..         MOV     R0,#?V0 + 0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002C   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00002F   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   7403         MOV     A,#0x3
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   8582..       MOV     ?V0 + 0,DPL
   \   00003F   8583..       MOV     ?V0 + 1,DPH
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   75..08       MOV     ?V0 + 0,#0x8
   \   00004A   75..00       MOV     ?V0 + 1,#0x0
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   75..01       MOV     ?V0 + 0,#0x1
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   7920         MOV     R1,#0x20
   \   00005C   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00005E   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000060   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000062   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000064   12....       LCALL   ??AF_DataRequest?relay
   \   000067   7409         MOV     A,#0x9
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
    397            }
    398          }
   \                     ??callback_0:
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000071   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for T_VALUE>`:
   \   000000   20           DB 32

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for H_VALUE>`:
   \   000000   37           DB 55

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for C_VALUE>`:
   \   000000   03           DB 3

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for A_CMD1>`:
   \   000000   45414531     DB "EAE10000"
   \            30303030
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for A_CMD2>`:
   \   000000   45414532     DB "EAE20000"
   \            30303030
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for A_CMD3>`:
   \   000000   45414533     DB "EAE30000"
   \            30303030
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for B_CMD1>`:
   \   000000   45424534     DB "EBE40000"
   \            30303030
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for B_CMD2>`:
   \   000000   45424535     DB "EBE50000"
   \            30303030
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for B_CMD3>`:
   \   000000   45424536     DB "EBE60000"
   \            30303030
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for C_CMD1>`:
   \   000000   45434531     DB "ECE10000"
   \            30303030
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for C_CMD2>`:
   \   000000   45434532     DB "ECE20000"
   \            30303030
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for C_CMD3>`:
   \   000000   45434533     DB "ECE30000"
   \            30303030
   \            00      

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Delay_MS?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Delay_MS

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??callback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    callback

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   Maximum stack usage in bytes:

     Function                    ISTACK PSTACK XSTACK
     --------                    ------ ------ ------
     Delay_MS                        0      0     19
       -> Onboard_wait               0      0     18
     SampleApp_HandleKeys            0      0      0
     SampleApp_Init                  0      0      9
       -> MT_UartInit                0      0     18
       -> MT_UartRegisterTaskID      0      0     18
       -> afRegister                 0      0     18
       -> RegisterForKeys            0      0     18
       -> HalLcdWriteString          0      0     18
     SampleApp_MessageMSGCB          2      0     31
       -> AF_DataRequest             0      0     38
       -> HalUARTWrite               0      0     20
       -> HalUARTWrite               0      0     20
       -> HalUARTWrite               0      0     20
       -> AF_DataRequest             0      0     38
       -> HalUARTWrite               0      0     20
       -> Delay_MS                   0      0     20
       -> HalUARTWrite               0      0     20
       -> Delay_MS                   0      0     20
       -> HalUARTWrite               0      0     20
     SampleApp_ProcessEvent          0      0     12
       -> osal_msg_receive           0      0     24
       -> osal_start_timerEx         0      0     24
       -> osal_msg_deallocate        0      0     24
       -> osal_msg_receive           0      0     24
       -> SampleApp_MessageMSGCB     0      0     24
     SampleApp_Send_P2P_Message      0      0      0
     callback                        0      0     28
       -> HalUARTRead                0      0     38
       -> AF_DataRequest             0      0     56


   Segment part sizes:

     Function/Label                     Bytes
     --------------                     -----
     T_VALUE                               1
     H_VALUE                               1
     C_VALUE                               1
     count                                 1
     TEM                                   1
     HUM                                   1
     CO2                                   1
     ADDR                                  1
     A_CMD1                                9
     A_CMD2                                9
     A_CMD3                                9
     B_CMD1                                9
     B_CMD2                                9
     B_CMD3                                9
     C_CMD1                                9
     C_CMD2                                9
     C_CMD3                                9
     SampleApp_ClusterList                 4
     SampleApp_SimpleDesc                 12
     SampleApp_epDesc                      6
     SampleApp_TaskID                      1
     SampleApp_NwkState                    1
     SampleApp_TransID                     1
     SampleApp_P2P_DstAddr                12
     SampleApp_Periodic_DstAddr           12
     SampleApp_Group                      18
     SampleAppPeriodicCounter              1
     SampleAppFlashCounter                 1
     Delay_MS                             24
     ?Subroutine0                          5
     SampleApp_Init                      116
     SampleApp_ProcessEvent              119
     SampleApp_HandleKeys                  3
     SampleApp_MessageMSGCB              471
     ?Subroutine1                          5
     ?Subroutine11                        15
     ?Subroutine10                        12
     ?Subroutine9                         15
     ?Subroutine8                         17
     ?Subroutine7                         13
     ?Subroutine6                         19
     ?Subroutine14                         4
     ?Subroutine16                        10
     ?Subroutine5                          7
     ?Subroutine4                          8
     ?Subroutine13                         4
     ?Subroutine15                        11
     ?Subroutine3                          6
     ?Subroutine2                         25
     ?Subroutine12                         7
     SampleApp_Send_P2P_Message            3
     callback                            116
     ?<Initializer for T_VALUE>            1
     ?<Initializer for H_VALUE>            1
     ?<Initializer for C_VALUE>            1
     ?<Initializer for A_CMD1>             9
     ?<Initializer for A_CMD2>             9
     ?<Initializer for A_CMD3>             9
     ?<Initializer for B_CMD1>             9
     ?<Initializer for B_CMD2>             9
     ?<Initializer for B_CMD3>             9
     ?<Initializer for C_CMD1>             9
     ?<Initializer for C_CMD2>             9
     ?<Initializer for C_CMD3>             9
     ??Delay_MS?relay                      6
     ??SampleApp_Init?relay                6
     ??SampleApp_ProcessEvent?relay        6
     ??SampleApp_HandleKeys?relay          6
     ??SampleApp_MessageMSGCB?relay        6
     ??SampleApp_Send_P2P_Message?relay    6
     ??callback?relay                      6
     ?<Constant "SampleApp">              10

 
 1 035 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
    84 bytes in segment XDATA_I
    84 bytes in segment XDATA_ID
    26 bytes in segment XDATA_ROM_C
    58 bytes in segment XDATA_Z
 
 1 161 bytes of CODE  memory
    26 bytes of CONST memory
   142 bytes of XDATA memory

Errors: none
Warnings: 1
