///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        26/Mar/2017  22:38:41 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\Source\E /
//                          ndPointA.c                                        /
//    Command line       =  -f C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2. /
//                          3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg          /
//                          (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS) -f   /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\Tools\CC2530DB\f8wConfig.cfg            /
//                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR     /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\lucifer\Desktop\– /
//                          ≠“È\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sam /
//                          ples\SampleApp\Source\EndPointA.c -D ZIGBEEPRO    /
//                          -D NWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D       /
//                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                   /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \EndDeviceEB-Pro\List\ -lA                        /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \EndDeviceEB-Pro\List\ --diag_suppress            /
//                          Pe001,Pa010 -o C:\Users\lucifer\Desktop\–≠“È\ZSta /
//                          ck-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\EndDeviceEB-Pro\Obj\ -e --debug   /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \ -I C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530- /
//                          2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC2 /
//                          530DB\..\SOURCE\ -I C:\Users\lucifer\Desktop\–≠“È /
//                          \ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I  /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\MT\ -I                 /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I        /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\   /
//                          -I C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2. /
//                          3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I  /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I       /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\STACK\AF\ -I           /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\STACK\NWK\ -I          /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\STACK\SEC\ -I          /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I         /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\STACK\SYS\ -I          /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I          /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I           /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\ZMAC\ -I               /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I     /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I     /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I        /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I     /
//                          C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\   /
//                          -I C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2. /
//                          3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04 /
//                          \SINGLE_CHIP\ -Ohz --require_prototypes           /
//    List file          =  C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0 /
//                          -1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \EndDeviceEB-Pro\List\EndPointA.s51               /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME EndPointA

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_GE
        EXTERN ?FLT_LT
        EXTERN ?FLT_MUL
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_TO_FLT
        EXTERN ?US_SHR
        EXTERN ?V0
        EXTERN __INIT_XDATA_Z

        PUBLIC ??ADCinital?relay
        FUNCTION ??ADCinital?relay,0203H
        PUBLIC ??SampleApp_HandleKeys?relay
        FUNCTION ??SampleApp_HandleKeys?relay,0203H
        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_MessageMSGCB?relay
        FUNCTION ??SampleApp_MessageMSGCB?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        PUBLIC ??SampleApp_Send_P2P_Message?relay
        FUNCTION ??SampleApp_Send_P2P_Message?relay,0203H
        PUBLIC ??callback?relay
        FUNCTION ??callback?relay,0203H
        PUBLIC ??get_CO2_Message?relay
        FUNCTION ??get_CO2_Message?relay,0203H
        PUBLIC ADC
        PUBWEAK ADCCFG
        PUBWEAK ADCCON1
        PUBWEAK ADCCON3
        PUBWEAK ADCH
        PUBWEAK ADCL
        PUBLIC ADCinital
        FUNCTION ADCinital,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC CO2
        PUBLIC Humidity
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBLIC SampleAppFlashCounter
        PUBLIC SampleAppPeriodicCounter
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Group
        PUBLIC SampleApp_HandleKeys
        FUNCTION SampleApp_HandleKeys,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_P2P_DstAddr
        PUBLIC SampleApp_Periodic_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC SampleApp_Send_P2P_Message
        FUNCTION SampleApp_Send_P2P_Message,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        PUBLIC Temp
        PUBWEAK _A_TCON
        PUBWEAK __Constant_3a000000
        PUBWEAK __Constant_3e99999a
        PUBWEAK __Constant_3e99999b
        PUBWEAK __Constant_3f4ccccd
        PUBWEAK __Constant_3f4cccce
        PUBWEAK __Constant_3fc00000
        PUBWEAK __Constant_40533333
        PUBLIC callback
        FUNCTION callback,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC count
        PUBLIC get_CO2_Message
        FUNCTION get_CO2_Message,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC i
        PUBLIC strTemp
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
MT_UartInit         SYMBOL "MT_UartInit"
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
osal_rand           SYMBOL "osal_rand"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
DHT11               SYMBOL "DHT11"
memcpy              SYMBOL "memcpy"
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??DHT11?relay       SYMBOL "?relay", DHT11
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??afRegister?relay  SYMBOL "?relay", afRegister
??memcpy?relay      SYMBOL "?relay", memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
ADCinital           SYMBOL "ADCinital"
??ADCinital?relay   SYMBOL "?relay", ADCinital
SampleApp_HandleKeys SYMBOL "SampleApp_HandleKeys"
??SampleApp_HandleKeys?relay SYMBOL "?relay", SampleApp_HandleKeys
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
??SampleApp_MessageMSGCB?relay SYMBOL "?relay", SampleApp_MessageMSGCB
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent
SampleApp_Send_P2P_Message SYMBOL "SampleApp_Send_P2P_Message"
??SampleApp_Send_P2P_Message?relay SYMBOL "?relay", SampleApp_Send_P2P_Message
callback            SYMBOL "callback"
??callback?relay    SYMBOL "?relay", callback
get_CO2_Message     SYMBOL "get_CO2_Message"
??get_CO2_Message?relay SYMBOL "?relay", get_CO2_Message

        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN DHT11
        FUNCTION DHT11,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memcpy
        FUNCTION memcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??DHT11?relay
        FUNCTION ??DHT11?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??memcpy?relay
        FUNCTION ??memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN shidu_ge
        EXTERN shidu_shi
        EXTERN wendu_ge
        EXTERN wendu_shi

// C:\Users\lucifer\Desktop\–≠“È\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\EndPointA.c
//    1 
//    2 
//    3 /*********************************************************************
//    4  * INCLUDES
//    5  */
//    6 #include "OSAL.h"
//    7 #include "ZGlobals.h"
//    8 #include "AF.h"
//    9 #include "aps_groups.h"
//   10 #include "ZDApp.h"
//   11 
//   12 #include "SampleApp.h"
//   13 #include "SampleAppHw.h"
//   14 
//   15 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,088H
// union <unnamed> volatile __sfr _A_TCON
_A_TCON:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b4H
// unsigned char volatile __sfr ADCCON1
ADCCON1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b6H
// unsigned char volatile __sfr ADCCON3
ADCCON3:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0baH
// unsigned char volatile __sfr ADCL
ADCL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bbH
// unsigned char volatile __sfr ADCH
ADCH:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f2H
// unsigned char volatile __sfr ADCCFG
ADCCFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//   16 
//   17 /* HAL */
//   18 #include "hal_lcd.h"
//   19 #include "hal_led.h"
//   20 #include "hal_key.h"
//   21 #include "MT_UART.h"
//   22 #include "MT_APP.h"
//   23 #include "MT.h"
//   24 #include "DHT11.h"
//   25 #include <math.h>
//   26 #include<string.h>
//   27 /*********************************************************************
//   28  * GLOBAL VARIABLES
//   29  */
//   30 byte i; 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   31 int16 CO2;
CO2:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   32 float  ADC=0;
ADC:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   33 byte i, Temp[2],  Humidity[2], strTemp[6];
i:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
Temp:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
Humidity:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
strTemp:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   34 uint8 count=0;
count:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   35 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//   36 const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 2
//   37 {
//   38  SAMPLEAPP_PERIODIC_CLUSTERID1,
//   39  SAMPLEAPP_PERIODIC_CLUSTERID2,
//   40  
//   41 };
//   42 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   43 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 2
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 2
        DATA16
        DW SampleApp_ClusterList
//   44 {
//   45   SAMPLEAPP_ENDPOINT,              //  int Endpoint;
//   46   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//   47   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//   48   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//   49   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//   50   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//   51   (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
//   52   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//   53   (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
//   54 };
//   55 
//   56 // This is the Endpoint/Interface description.  It is defined here, but
//   57 // filled-in in SampleApp_Init().  Another way to go would be to fill
//   58 // in the structure here and make it a "const" (in code space).  The
//   59 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   60 endPointDesc_t SampleApp_epDesc;
SampleApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//   61 
//   62 /*********************************************************************
//   63  * EXTERNAL VARIABLES
//   64  */
//   65 
//   66 /*********************************************************************
//   67  * EXTERNAL FUNCTIONS
//   68  */
//   69 
//   70 /*********************************************************************
//   71  * LOCAL VARIABLES
//   72  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   73 uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   74                           // This variable will be received when
//   75                           // SampleApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   76 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   77 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   78 uint8 SampleApp_TransID;  // This is the unique message ID (counter)
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   79 
//   80 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   81 afAddrType_t SampleApp_P2P_DstAddr;      //µ„≤•
SampleApp_P2P_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   82 afAddrType_t SampleApp_Periodic_DstAddr;      //π„≤•
SampleApp_Periodic_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   83 aps_Group_t SampleApp_Group;
SampleApp_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//   84 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   85 uint8 SampleAppPeriodicCounter = 0;
SampleAppPeriodicCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   86 uint8 SampleAppFlashCounter = 0;
SampleAppFlashCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   87 
//   88 /*********************************************************************
//   89  * LOCAL FUNCTIONS
//   90  */
//   91 void SampleApp_HandleKeys( uint8 shift, uint8 keys );
//   92 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//   93 void SampleApp_Send_P2P_Message(void);
//   94 void callback(uint8 port,uint8 event);
//   95 void ADCinital(void);
//   96 int get_CO2_Message(void);
//   97 /*********************************************************************
//   98  * NETWORK LAYER CALLBACKS
//   99  */
//  100 
//  101 /*********************************************************************
//  102  * PUBLIC FUNCTIONS
//  103  */
//  104 
//  105 /*********************************************************************
//  106  * @fn      SampleApp_Init
//  107  *
//  108  * @brief   Initialization function for the Generic App Task.
//  109  *          This is called during initialization and should contain
//  110  *          any application specific initialization (ie. hardware
//  111  *          initialization/setup, table initialization, power up
//  112  *          notificaiton ... ).
//  113  *
//  114  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  115  *                    used to send messages and set timers.
//  116  *
//  117  * @return  none
//  118  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  119 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SampleApp_Init
        CODE
//  120 { 
        FUNCALL SampleApp_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, ADCinital
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  121   SampleApp_TaskID = task_id;
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//  122   SampleApp_NwkState = DEV_INIT;
        MOV     DPTR,#SampleApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  123   SampleApp_TransID = 0;
        MOV     DPTR,#SampleApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  124   
//  125   MT_UartInit();                  //¥Æø⁄≥ı ºªØ
        ; Setup parameters for call to function MT_UartInit
        LCALL   ??MT_UartInit?relay
//  126   MT_UartRegisterTaskID(task_id); //◊¢≤·¥Æø⁄»ŒŒÒ
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     A,R6
        MOV     R1,A
        LCALL   ??MT_UartRegisterTaskID?relay
//  127                                   //315µÁ◊”
//  128   P0SEL &= 0x7f;                  //P0_7≈‰÷√≥…Õ®”√ ‰»Îio£¨”√◊˜Œ¬ ™∂» ˝æ›“˝Ω≈
        ANL     0xf3,#0x7f
//  129   P0DIR &= ~0x80; 
        ANL     0xfd,#0x7f
//  130   ADCinital();        //P0_6Œ™ADC≤…ºØ—ÃŒÌ¥´∏–∆˜
        ; Setup parameters for call to function ADCinital
        LCALL   ??ADCinital?relay
//  131   //315µÁ◊” ø™∆Ù¡Ω√Î∂®÷‹∆⁄ ±»ŒŒÒ
//  132   osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  133         (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
        ; Setup parameters for call to function osal_rand
        LCALL   ?Subroutine1 & 0xFFFF
//  134   
//  135  #if defined ( BUILD_ALL_DEVICES )
//  136   // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//  137   // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//  138   // together - if they are - we will start up a coordinator. Otherwise,
//  139   // the device will start as a router.
//  140   if ( readCoordinatorJumper() )
//  141     zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
//  142   else
//  143     zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  144 #endif // BUILD_ALL_DEVICES
//  145 
//  146 #if defined ( HOLD_AUTO_START )
//  147   // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  148   //  from starting the device and wait for the application to
//  149   //  start the device.
//  150   ZDOInitDevice(0);
//  151 #endif
//  152   
//  153   SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µ„≤• 
??CrossCallReturnLabel_0:
        MOV     DPTR,#SampleApp_P2P_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  154   SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  155   SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //¡Ω÷’∂À“‘¥Àµÿ÷∑Ω´≤‚¡ø÷µ∑¢ÀÕµΩ–≠µ˜∆˜
        MOV     DPTR,#SampleApp_P2P_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  156   
//  157 
//  158   //◊∞‘ÿ√Ë ˆ∑˚–≈œ¢£¨ƒ¨»œ°£
//  159   SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
        MOV     DPTR,#SampleApp_epDesc
        MOV     A,#0x14
        MOVX    @DPTR,A
//  160   SampleApp_epDesc.task_id = &SampleApp_TaskID;
        INC     DPTR
        MOV     A,#SampleApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  161   SampleApp_epDesc.simpleDesc
//  162             = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        INC     DPTR
        MOV     A,#SampleApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  163   SampleApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  164 
//  165   // ◊¢≤·∂Àµ„√Ë ˆ∑˚
//  166   afRegister( &SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SampleApp_epDesc & 0xff
        MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  167 
//  168   // Register for all key events - This app will handle all key events
//  169   RegisterForKeys( SampleApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  170   
//  171  
//  172 #if defined ( LCD_SUPPORTED )
//  173   HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "SampleApp">` & 0xff
        MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
        CFI EndBlock cfiBlock0
//  174 #endif
//  175 }
        REQUIRE ?Subroutine0
        REQUIRE P0SEL
        REQUIRE P0DIR
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  176 
//  177 /*********************************************************************
//  178  * @fn      ”¶”√≤„»ŒŒÒ¬÷—Ø∫Ø ˝£¨À˘”–»ŒŒÒ∂º‘⁄’‚¿ÔÀ≥–Ú÷¥––
//  179  *
//  180  * @brief   Generic Application Task event processor.  This function
//  181  *          is called to process all events for the task.  Events
//  182  *          include timers, messages and any other user defined events.
//  183  *
//  184  * @param   task_id  - The OSAL assigned task ID.
//  185  * @param   events - events to process.  This is a bit map and can
//  186  *                   contain more than one event.
//  187  *
//  188  * @return  none
//  189  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  190 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
        CODE
//  191 {
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_Send_P2P_Message
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  192   afIncomingMSGPacket_t *MSGpkt;
//  193   (void)task_id;  // Intentionally unreferenced parameter
//  194 
//  195   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      ??SampleApp_ProcessEvent_0
//  196   {
//  197     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??SampleApp_ProcessEvent_1
//  198     while ( MSGpkt )
//  199     {
//  200       switch ( MSGpkt->hdr.event )
??SampleApp_ProcessEvent_2:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        XRL     A,#0xd1
        JNZ     ??CrossCallReturnLabel_1
//  201       {
//  202         // ∞¥º¸»ŒŒÒ£¨Œ¥ π”√
//  203         case KEY_CHANGE:
//  204           SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  205           break;
//  206 
//  207         //Ω” ’µΩŒﬁœﬂœ˚œ¢£¨µ˜”√œ˚œ¢Ω‚Œˆ∫Ø ˝
//  208         case AF_INCOMING_MSG_CMD: 
//  209           SampleApp_MessageMSGCB( MSGpkt );
//  210           break;
//  211 
//  212         // ”≤º˛≥ı ºªØ
//  213         case ZDO_STATE_CHANGE:
//  214           SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SampleApp_NwkState
        MOVX    @DPTR,A
//  215           if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
//  216               
//  217                //÷ª”–Œ¬∂»÷’∂À∆Ù∂Ø1.1s∂® ±—≠ª∑∑¢ÀÕŒ¬ ™∂»
//  218                (SampleApp_NwkState == DEV_END_DEVICE) )
        XRL     A,#0x6
        JNZ     ??CrossCallReturnLabel_1
//  219           {
//  220             //∂® ±∆Ù∂Ø»ŒŒÒ
//  221             osal_start_timerEx( SampleApp_TaskID,
//  222                               SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  223                               (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT+(osal_rand() & 0x00FF)) );
        ; Setup parameters for call to function osal_rand
        LCALL   ?Subroutine1 & 0xFFFF
//  224           }
//  225           else
//  226           {
//  227             // Device is no longer in the network
//  228           }
//  229           break;
//  230 
//  231         default:
//  232           break;
//  233       }
//  234 
//  235       // Release the memory
//  236       osal_msg_deallocate( (uint8 *)MSGpkt );
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  237 
//  238       // Next - if one is available
//  239       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??SampleApp_ProcessEvent_1:
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  240     }
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??SampleApp_ProcessEvent_2
//  241 
//  242     // return unprocessed events
//  243     return (events ^ SYS_EVENT_MSG);
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??SampleApp_ProcessEvent_3:
        MOV     R3,A
        SJMP    ??SampleApp_ProcessEvent_4
//  244   }
//  245 
//  246   // Send a message out - This event is generated by a timer
//  247   //  (setup in SampleApp_Init()).
//  248   if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
??SampleApp_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_5
//  249   {
//  250    
//  251     SampleApp_Send_P2P_Message();
        ; Setup parameters for call to function SampleApp_Send_P2P_Message
        LCALL   ??SampleApp_Send_P2P_Message?relay
//  252 
//  253     // Setup to send message again in normal period (+ a little jitter)
//  254     osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  255         (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
        ; Setup parameters for call to function osal_rand
        LCALL   ?Subroutine1 & 0xFFFF
//  256 
//  257     // return unprocessed events
//  258     return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
??CrossCallReturnLabel_2:
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        SJMP    ??SampleApp_ProcessEvent_3
//  259   }
//  260 
//  261   // Discard unknown events
//  262   return 0;
??SampleApp_ProcessEvent_5:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SampleApp_ProcessEvent_4:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  263 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        LCALL   ??osal_rand?relay
        ; Setup parameters for call to function osal_start_timerEx
        ; Setup parameters for call to function osal_start_timerEx
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        ADD     A,#-0x30
        MOV     R4,A
        CLR     A
        ADDC    A,#0x7
        MOV     R5,A
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6
//  264 
//  265 /*********************************************************************
//  266  * Event Generation Functions
//  267  */
//  268 /*********************************************************************
//  269  * @fn      SampleApp_HandleKeys
//  270  *
//  271  * @brief   Handles all key events for this device.
//  272  *
//  273  * @param   shift - true if in shift/alt.
//  274  * @param   keys - bit field for key events. Valid entries:
//  275  *                 HAL_KEY_SW_2
//  276  *                 HAL_KEY_SW_1
//  277  *
//  278  * @return  none
//  279  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  280 void SampleApp_HandleKeys( uint8 shift, uint8 keys )
SampleApp_HandleKeys:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function SampleApp_HandleKeys
        CODE
//  281 {
        ; Saved register size: 0
        ; Auto size: 0
//  282  //Œ¥ π”√£¨≤ªµ√…æ≥˝ 
//  283 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock7
//  284 
//  285 /*********************************************************************
//  286  * LOCAL FUNCTIONS
//  287  */
//  288 
//  289 /*********************************************************************
//  290  * @fn      SampleApp_MessageMSGCB
//  291  *
//  292  * @brief   Data message processor callback.  This function processes
//  293  *          any incoming data - probably from other devices.  So, based
//  294  *          on cluster ID, perform the intended action.
//  295  *
//  296  * @param   none
//  297  *
//  298  * @return  none
//  299  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  300 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
SampleApp_MessageMSGCB:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function SampleApp_MessageMSGCB
        CODE
//  301 {  
        ; Saved register size: 0
        ; Auto size: 0
//  302 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock8
//  303 /*********************************************************************
//  304  * @fn      SampleApp_Send_P2P_Message
//  305  *
//  306  * @brief   point to point.
//  307  *
//  308  * @param   none
//  309  *
//  310  * @return  none
//  311  */
//  312 //√ø¥Œ∂® ± ±º‰µΩµ˜”√∏√∫Ø ˝  315µÁ◊”

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  313 void SampleApp_Send_P2P_Message( void )//¥À∫Ø ˝÷ª”–Œ¬∂»÷’∂Àª·µ˜”√£¨Ω´Œ¬ ™∂»‘≠ º ˝æ›≤∑÷Œ™ ÆŒª”Î∏ˆŒª
SampleApp_Send_P2P_Message:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function SampleApp_Send_P2P_Message
        CODE
//  314                                        //II◊÷∑˚
//  315 {
        FUNCALL SampleApp_Send_P2P_Message, DHT11
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, get_CO2_Message
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  316   unsigned long light_data;
//  317   
//  318   DHT11();//ªÒ»°Œ¬ ™∂»
        ; Setup parameters for call to function DHT11
        LCALL   ??DHT11?relay
//  319   Temp[0] = wendu_shi;
        MOV     DPTR,#wendu_shi
        MOVX    A,@DPTR
        MOV     DPTR,#Temp
        MOVX    @DPTR,A
//  320   Temp[1] = wendu_ge; 
        MOV     DPTR,#wendu_ge
        MOVX    A,@DPTR
        MOV     DPTR,#Temp + 1
        MOVX    @DPTR,A
//  321   Humidity[0] = shidu_shi;
        MOV     DPTR,#shidu_shi
        MOVX    A,@DPTR
        MOV     DPTR,#Humidity
        MOVX    @DPTR,A
//  322   Humidity[1] = shidu_ge;
        MOV     DPTR,#shidu_ge
        MOVX    A,@DPTR
        MOV     DPTR,#Humidity + 1
        MOVX    @DPTR,A
//  323   CO2=get_CO2_Message();
        ; Setup parameters for call to function get_CO2_Message
        LCALL   ??get_CO2_Message?relay
        MOV     DPTR,#CO2
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  324   strTemp[0] = 1; //AΩ⁄µ„µÿ÷∑¬Î£¨∏ƒŒ™2œ¬‘ÿµΩC÷’∂À ,◊‘–––ﬁ∏ƒ
        MOV     DPTR,#strTemp
        MOV     A,#0x1
        MOVX    @DPTR,A
//  325   strTemp[5] = CO2; 
        MOV     DPTR,#CO2
        MOVX    A,@DPTR
        MOV     DPTR,#strTemp + 5
        MOVX    @DPTR,A
//  326   memcpy(&strTemp[1], Temp,2);
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#Temp & 0xff
        MOV     R5,#(Temp >> 8) & 0xff
        MOV     R2,#(strTemp + 1) & 0xff
        MOV     R3,#((strTemp + 1) >> 8) & 0xff
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  327   memcpy(&strTemp[3], Humidity,2);
        ; Setup parameters for call to function memcpy
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#Humidity & 0xff
        MOV     R5,#(Humidity >> 8) & 0xff
        MOV     R2,#(strTemp + 3) & 0xff
        MOV     R3,#((strTemp + 3) >> 8) & 0xff
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  328  //Œﬁœﬂ∑¢ÀÕ£¨Ω´ ˝æ›ÀÕ÷¡–≠µ˜∆˜
//  329   AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
//  330                        SAMPLEAPP_PERIODIC_CLUSTERID1,
//  331                        6,
//  332                        strTemp,
//  333                        &SampleApp_TransID,
//  334                        AF_DISCV_ROUTE,
//  335                        AF_DEFAULT_RADIUS );  
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#strTemp & 0xff
        MOV     ?V0 + 1,#(strTemp >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#0x6
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_P2P_DstAddr & 0xff
        MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  336   
//  337 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock9

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  338 void callback(uint8 port, uint8 event)
callback:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function callback
        CODE
//  339 {
        ; Saved register size: 0
        ; Auto size: 0
//  340 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock10

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  341 int get_CO2_Message(void)
get_CO2_Message:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function get_CO2_Message
        CODE
//  342 {
        FUNCALL get_CO2_Message, ADCinital
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  343  
//  344   unsigned short  NUM;
//  345   while ( !ADCIF ) ;       
??get_CO2_Message_0:
        MOV     C,0x88.5
        JNC     ??get_CO2_Message_0
//  346   NUM = ADCL;
        MOV     A,0xba
        MOV     ?V0 + 0,A
//  347   NUM |= ((uint16)ADCH) << 8 ;//’‚¿Ô◊¢“‚“ªœ¬
//  348   NUM >>= 4;
        MOV     A,0xbb
        MOV     R1,A
        MOV     A,?V0 + 0
        MOV     ?V0 + 2,A
        MOV     A,R1
        MOV     ?V0 + 3,A
        MOV     A,#0x4
        MOV     R0,#?V0 + 2
        LCALL   ?US_SHR
        MOV     ?V0 + 0,?V0 + 2
        MOV     ?V0 + 1,?V0 + 3
//  349   
//  350   ADCinital();
        ; Setup parameters for call to function ADCinital
        LCALL   ??ADCinital?relay
//  351   if (NUM&0x8000) NUM=0;
//  352   if (NUM>4000) NUM=0;
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#-0x5f
        MOV     A,?V0 + 1
        SUBB    A,#0xf
        JC      ??get_CO2_Message_1
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  353   ADC=(float)((float)NUM*3.30/2048); 
??get_CO2_Message_1:
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_40533333
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_3a000000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#ADC
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  354   if(ADC<0.3)  return 1;   //1º∂≈®∂»÷µ 0-0.3V 
        MOV     DPTR,#ADC
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_3e99999a
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_LT
        JNC     ??get_CO2_Message_2
        MOV     R2,#0x1
        SJMP    ??get_CO2_Message_3
//  355   if(ADC<0.8&&ADC>0.3)  return 2; //2º∂≈®∂»÷µ 0.3-0.8V 
??get_CO2_Message_2:
        MOV     DPTR,#ADC
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_3f4ccccd
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_LT
        JNC     ??get_CO2_Message_4
        MOV     DPTR,#ADC
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_3e99999b
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_GE
        JNC     ??get_CO2_Message_4
        MOV     R2,#0x2
        SJMP    ??get_CO2_Message_3
//  356   if(ADC<1.5&&ADC>0.8)  return 3; //3º∂≈®∂»÷µ 0.8-1.5V   ’‚»˝∏ˆ«¯º‰ø…“‘◊‘–––ﬁ∏ƒµΩ∫œ¿Ì÷µ£¨ƒ¨»œµ„—Ã≤˙…˙µƒ—ÃŒÌæÕƒ‹¥ÔµΩµ»º∂2ªÚ’ﬂ3£¨’˝≥£Œ™1
??get_CO2_Message_4:
        MOV     DPTR,#ADC
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_3fc00000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_LT
        JNC     ??get_CO2_Message_5
        MOV     DPTR,#ADC
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_3f4cccce
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_GE
        JNC     ??get_CO2_Message_5
        MOV     R2,#0x3
??get_CO2_Message_3:
        MOV     R3,#0x0
??get_CO2_Message_5:
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock11
        REQUIRE _A_TCON
        REQUIRE ADCL
        REQUIRE ADCH
//  357 }
//  358 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  359 void ADCinital(void)
ADCinital:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function ADCinital
        CODE
//  360 {
        ; Saved register size: 0
        ; Auto size: 0
//  361   ADCH&=0X00;//«ÂEOC±Í÷æ
        MOV     A,0xbb
        MOV     0xbb,#0x0
//  362   ADCCFG|=0X40;//p0.6≈‰÷√Œ™ƒ£ƒ‚ø⁄
        ORL     0xf2,#0x40
//  363   ADCCON3=0XB6;//µ•¥Œ◊™ªª£¨≤ŒøºµÁ—πŒ™µÁ‘¥µÁ—π£¨∂‘P0.6≤…—˘£¨æ´∂»12Œª            
        MOV     0xb6,#-0x4a
//  364   ADCCON1=0X30;//Õ£÷πAD
        MOV     0xb4,#0x30
//  365   ADCCON1|=0X40;//ø™ ºAD
        ORL     0xb4,#0x40
//  366 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock12
        REQUIRE ADCH
        REQUIRE ADCCFG
        REQUIRE ADCCON3
        REQUIRE ADCCON1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Send_P2P_Message?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Send_P2P_Message

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??callback?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    callback

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??get_CO2_Message?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    get_CO2_Message

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ADCinital?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ADCinital

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SampleApp">`:
        DB "SampleApp"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_40533333:
        DD 40533333H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3a000000:
        DD 3A000000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e99999a:
        DD 3E99999AH

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3f4ccccd:
        DD 3F4CCCCDH

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e99999b:
        DD 3E99999BH

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3fc00000:
        DD 3FC00000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3f4cccce:
        DD 3F4CCCCEH

        END
//  367 /*********************************************************************
//  368 *********************************************************************/
// 
// 694 bytes in segment BANKED_CODE
//  48 bytes in segment BANK_RELAYS
//   8 bytes in segment SFR_AN
//  54 bytes in segment XDATA_ROM_C
//  71 bytes in segment XDATA_Z
// 
// 742 bytes of CODE  memory
//  26 bytes of CONST memory (+ 28 bytes shared)
//   0 bytes of DATA  memory (+  8 bytes shared)
//  71 bytes of XDATA memory
//
//Errors: none
//Warnings: 2
